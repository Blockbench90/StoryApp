import React, {useEffect, useState} from "react"
import {ModalBlock} from "../../../componetns/ModalBlock"
import FormControl from "@material-ui/core/FormControl"
import FormGroup from "@material-ui/core/FormGroup"
import TextField from "@material-ui/core/TextField"
import {Button} from "@material-ui/core"
import {useStylesSignIn} from "../theme"
import {Controller, useForm} from "react-hook-form"
import {yupResolver} from '@hookform/resolvers/yup'
import * as yup from "yup"
import {useDispatch, useSelector} from "react-redux"
import {FetchLoginAC} from "../../../store/reducers/users/actionCreators"
import {selectUserStatus} from "../../../store/reducers/users/selectors";
import {LoadingStatus} from "../../../store/types";
import {CustomNotification} from "../../../componetns/CustomNotification";

export interface LoginFormProps {
    email: string
    password: string
}

interface LoginModalProps {
    open: boolean
    onClose: () => void
}

//—Å—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü–∏ –ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏, –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ
const LoginFormSchema = yup.object().shape({
    email: yup.string().email('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã').required('–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É'),
    password: yup.string().min(6, '‚Äã–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è 6 —Å–∏–º–≤–æ–ª–æ–≤').required(),
});

/*–ë–õ–û–ö "–í–û–ô–¢–ò"*/
const LoginModal: React.FC<LoginModalProps> = ({open, onClose}): React.ReactElement => {
    const classes = useStylesSignIn();
    const dispatch = useDispatch();
    const loadingStatus = useSelector(selectUserStatus);
    const [message, setMessage] = useState<'error' | 'success'>()


    //react-hook-form –ª—é–±–µ–∑–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–ø–∞—Å–∏–±–æ
    const {control, handleSubmit, errors} = useForm<LoginFormProps>({
        resolver: yupResolver(LoginFormSchema)
    });

    //–ø—Ä–∏ —Å–∞–±–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏–º –≤ —Ä–µ–¥–∞–∫—Å –¥–∞–Ω–Ω—ã–µ, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∏–∑ input
    const onSubmit = async (data: LoginFormProps) => {
        dispatch(FetchLoginAC(data))
    };

    useEffect(() => {
         if (loadingStatus === LoadingStatus.ERROR) {
            setMessage('error')
        }
    }, []);
    return (
        <>
            {message === 'error' ? <CustomNotification isOpen={true} type={'error'}
                    text={'–ì–¥–µ-—Ç–æ –í—ã, —É–≤–∞–∂–∞–µ–º—ã–π, –¥–∞–ª–∏ –≤ —à—Ç–∞–Ω–≥—É üòÑ'} autoHide={5000}/> : null}
            <ModalBlock visible={open} onClose={onClose} classes={classes} title="–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç">

                <form onSubmit={handleSubmit(onSubmit)}>
                    <FormControl className={classes.loginFormControl} component="fieldset" fullWidth>
                        <FormGroup aria-label="position" row>
                            <Controller as={TextField} control={control} name="email"
                                        className={classes.loginSideField} id="email"
                                        label="E-Mail" InputLabelProps={{shrink: true}}
                                        variant="filled" type="email" defaultValue=""
                                        helperText={errors.email?.message}
                                        error={!!errors.email} fullWidth autoFocus/>

                            <Controller as={TextField} control={control} name="password"
                                        className={classes.loginSideField} id="password"
                                        label="–ü–∞—Ä–æ–ª—å" InputLabelProps={{shrink: true}}
                                        variant="filled" type="password" defaultValue=""
                                        helperText={errors.password?.message}
                                        error={!!errors.password} fullWidth/>

                            <Button type="submit" variant="contained" fullWidth>–í–æ–π—Ç–∏</Button>
                        </FormGroup>
                    </FormControl>
                </form>
            </ModalBlock>
        </>
    )
}

export default LoginModal