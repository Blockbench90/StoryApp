[{"C:\\APPS\\StoryApp\\client\\src\\index.js":"1","C:\\APPS\\StoryApp\\client\\src\\store\\store.ts":"2","C:\\APPS\\StoryApp\\client\\src\\App.tsx":"3","C:\\APPS\\StoryApp\\client\\src\\theme.jsx":"4","C:\\APPS\\StoryApp\\client\\src\\store\\saga.ts":"5","C:\\APPS\\StoryApp\\client\\src\\store\\types.ts":"6","C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\users\\reducer.ts":"7","C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\users\\selectors.ts":"8","C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\stories\\reducer.ts":"9","C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\story\\reducer.ts":"10","C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\users\\actionCreators.ts":"11","C:\\APPS\\StoryApp\\client\\src\\pages\\SingIn\\theme.ts":"12","C:\\APPS\\StoryApp\\client\\src\\pages\\Layout.tsx":"13","C:\\APPS\\StoryApp\\client\\src\\pages\\Home\\Home.tsx":"14","C:\\APPS\\StoryApp\\client\\src\\pages\\Profile\\Profile.tsx":"15","C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\users\\saga.ts":"16","C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\story\\saga.ts":"17","C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\stories\\sagas.ts":"18","C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\story\\actionCreators.ts":"19","C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\stories\\actionCreators.ts":"20","C:\\APPS\\StoryApp\\client\\src\\pages\\SingIn\\index.tsx":"21","C:\\APPS\\StoryApp\\client\\src\\componetns\\ScrollButton.tsx":"22","C:\\APPS\\StoryApp\\client\\src\\restApi\\userApi.ts":"23","C:\\APPS\\StoryApp\\client\\src\\restApi\\storiesApi.ts":"24","C:\\APPS\\StoryApp\\client\\src\\pages\\SingIn\\components\\LoginModal.tsx":"25","C:\\APPS\\StoryApp\\client\\src\\pages\\SingIn\\components\\RegistrationModal.tsx":"26","C:\\APPS\\StoryApp\\client\\src\\componetns\\ModalBlock.tsx":"27","C:\\APPS\\StoryApp\\client\\src\\restApi\\axios.ts":"28","C:\\APPS\\StoryApp\\client\\src\\pages\\Profile\\ProfileStyle.ts":"29","C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\stories\\selectors.ts":"30","C:\\APPS\\StoryApp\\client\\src\\pages\\Home\\theme.ts":"31","C:\\APPS\\StoryApp\\client\\src\\componetns\\ProfileAvatar.tsx":"32","C:\\APPS\\StoryApp\\client\\src\\componetns\\FullStory.tsx":"33","C:\\APPS\\StoryApp\\client\\src\\componetns\\Story.tsx":"34","C:\\APPS\\StoryApp\\client\\src\\componetns\\ModalMenu.tsx":"35","C:\\APPS\\StoryApp\\client\\src\\pages\\Home\\RightSide.tsx":"36","C:\\APPS\\StoryApp\\client\\src\\componetns\\HeaderMenu.tsx":"37","C:\\APPS\\StoryApp\\client\\src\\componetns\\AddStoryForm.tsx":"38","C:\\APPS\\StoryApp\\client\\src\\utils\\BackButton.tsx":"39","C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\story\\selectors.ts":"40","C:\\APPS\\StoryApp\\client\\src\\componetns\\SearchTextField.tsx":"41","C:\\APPS\\StoryApp\\client\\src\\utils\\formatDate.ts":"42"},{"size":794,"mtime":1608572166539,"results":"43","hashOfConfig":"44"},{"size":1056,"mtime":1608739938089,"results":"45","hashOfConfig":"44"},{"size":2517,"mtime":1608983980346,"results":"46","hashOfConfig":"44"},{"size":2542,"mtime":1608311980681,"results":"47","hashOfConfig":"44"},{"size":295,"mtime":1608739938088,"results":"48","hashOfConfig":"44"},{"size":179,"mtime":1608805639704,"results":"49","hashOfConfig":"44"},{"size":1267,"mtime":1608742217604,"results":"50","hashOfConfig":"44"},{"size":1193,"mtime":1608739938087,"results":"51","hashOfConfig":"44"},{"size":2340,"mtime":1608816758720,"results":"52","hashOfConfig":"44"},{"size":1904,"mtime":1608805027061,"results":"53","hashOfConfig":"44"},{"size":2885,"mtime":1608828976894,"results":"54","hashOfConfig":"44"},{"size":1746,"mtime":1608739938073,"results":"55","hashOfConfig":"44"},{"size":1245,"mtime":1608981761403,"results":"56","hashOfConfig":"44"},{"size":3407,"mtime":1608824155648,"results":"57","hashOfConfig":"44"},{"size":13042,"mtime":1608981761404,"results":"58","hashOfConfig":"44"},{"size":3381,"mtime":1608742465957,"results":"59","hashOfConfig":"44"},{"size":1995,"mtime":1608809875040,"results":"60","hashOfConfig":"44"},{"size":1430,"mtime":1608802597115,"results":"61","hashOfConfig":"44"},{"size":2916,"mtime":1608805027294,"results":"62","hashOfConfig":"44"},{"size":3319,"mtime":1608802597152,"results":"63","hashOfConfig":"44"},{"size":2593,"mtime":1608982272091,"results":"64","hashOfConfig":"44"},{"size":2244,"mtime":1608823873060,"results":"65","hashOfConfig":"44"},{"size":1622,"mtime":1608983453855,"results":"66","hashOfConfig":"44"},{"size":1072,"mtime":1608809941653,"results":"67","hashOfConfig":"44"},{"size":4924,"mtime":1608996426931,"results":"68","hashOfConfig":"44"},{"size":7782,"mtime":1608983416832,"results":"69","hashOfConfig":"44"},{"size":1285,"mtime":1608982899629,"results":"70","hashOfConfig":"44"},{"size":255,"mtime":1608739938074,"results":"71","hashOfConfig":"44"},{"size":1641,"mtime":1608981761405,"results":"72","hashOfConfig":"44"},{"size":1344,"mtime":1608739938080,"results":"73","hashOfConfig":"44"},{"size":7519,"mtime":1608816861695,"results":"74","hashOfConfig":"44"},{"size":3940,"mtime":1608823082187,"results":"75","hashOfConfig":"44"},{"size":6594,"mtime":1608821686317,"results":"76","hashOfConfig":"44"},{"size":6126,"mtime":1608823872996,"results":"77","hashOfConfig":"44"},{"size":1411,"mtime":1608822223839,"results":"78","hashOfConfig":"44"},{"size":5020,"mtime":1608824543100,"results":"79","hashOfConfig":"44"},{"size":7640,"mtime":1608981761401,"results":"80","hashOfConfig":"44"},{"size":7757,"mtime":1608816758693,"results":"81","hashOfConfig":"44"},{"size":533,"mtime":1608824262501,"results":"82","hashOfConfig":"44"},{"size":1173,"mtime":1608742777766,"results":"83","hashOfConfig":"44"},{"size":1014,"mtime":1608823872974,"results":"84","hashOfConfig":"44"},{"size":235,"mtime":1608817454862,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"1kg83xe",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"91"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"91"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"91"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"91"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"91"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\APPS\\StoryApp\\client\\src\\index.js",[],["177","178"],"C:\\APPS\\StoryApp\\client\\src\\store\\store.ts",[],["179","180"],"C:\\APPS\\StoryApp\\client\\src\\App.tsx",["181"],"import React, {useEffect} from 'react';\r\nimport {Route, Switch, useHistory} from 'react-router-dom'\r\nimport {SignIn} from \"./pages/SingIn\";\r\nimport Layout from \"./pages/Layout\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Profile} from \"./pages/Profile/Profile\";\r\nimport {Home} from \"./pages/Home/Home\";\r\nimport {useStylesSignIn} from \"./pages/SingIn/theme\";\r\nimport ImportContactsOutlinedIcon from \"@material-ui/icons/ImportContactsOutlined\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {selectUserIsAuth, selectUserStatus} from \"./store/reducers/users/selectors\";\r\nimport {LoadingStatus} from \"./store/types\";\r\nimport {FetchAuthAC} from \"./store/reducers/users/actionCreators\";\r\n\r\n\r\n//TODO: выяснить, почему не компилится когда есть tsconfig, и какого черта он постоянно создается\r\n//подтянуть информацию о пользователе, в общем страница пользователя и подкоректировать бэк\r\nconst App = () => {\r\n    const classes = useStylesSignIn()\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector(selectUserIsAuth)\r\n    const loadingStatus = useSelector(selectUserStatus)\r\n    //говорит о полной готовности загрузки\r\n    const isReady = loadingStatus !== LoadingStatus.NEVER && loadingStatus !== LoadingStatus.LOADING\r\n\r\n    useEffect(() => {\r\n        //запрос на логинизацию\r\n        dispatch(FetchAuthAC());\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        //если и дата прилетела и статусы поменялись\r\n        (!isAuth && isReady) ? history.push('/signin') : history.push('/home')\r\n    }, [isAuth, isReady]);\r\n\r\n    if (!isReady) {\r\n        return (\r\n            <div className={classes.loadingApp}>\r\n                <ImportContactsOutlinedIcon className={classes.loadingIcon} aria-label=\"\" color=\"secondary\"/>\r\n                <CircularProgress className={classes.loadingStatusBar}/>\r\n            </div>)\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <Switch>\r\n                <Route path=\"/signin\" component={SignIn} exact/>\r\n                <Layout>\r\n                    <Route path=\"/home\" component={Home}/>\r\n                    <Route path=\"/profile\" component={Profile}/>\r\n                </Layout>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","C:\\APPS\\StoryApp\\client\\src\\theme.jsx",[],"C:\\APPS\\StoryApp\\client\\src\\store\\saga.ts",[],"C:\\APPS\\StoryApp\\client\\src\\store\\types.ts",[],"C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\users\\reducer.ts",[],"C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\users\\selectors.ts",[],"C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\stories\\reducer.ts",[],"C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\story\\reducer.ts",[],"C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\users\\actionCreators.ts",[],"C:\\APPS\\StoryApp\\client\\src\\pages\\SingIn\\theme.ts",[],"C:\\APPS\\StoryApp\\client\\src\\pages\\Layout.tsx",["182"],"import React, {useEffect} from 'react';\r\nimport {Container, Grid} from '@material-ui/core';\r\nimport {HeaderMenu} from \"../componetns/HeaderMenu\";\r\nimport {useHomeStyles} from \"./Home/theme\";\r\nimport RightSide from \"./Home/RightSide\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchStoriesAC} from \"../store/reducers/stories/actionCreators\";\r\ninterface Layout {\r\n    children: React.ReactNode\r\n}\r\n\r\nconst Layout: React.FC<Layout> = ({children}): React.ReactElement => {\r\n    const dispatch = useDispatch()\r\n    const classes = useHomeStyles()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchStoriesAC())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.wrapper}>\r\n            {/*spacing - расстояние между блоками гридов*/}\r\n            <Grid container spacing={2}>\r\n                <Grid xs={12} item>\r\n                    <HeaderMenu classes={classes}/>\r\n                </Grid>\r\n\r\n                <Grid xs={11} item>\r\n                    {children}\r\n                </Grid>\r\n\r\n                <Grid xs={1} item>\r\n                    <RightSide classes={classes}/>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\nexport default Layout\r\n","C:\\APPS\\StoryApp\\client\\src\\pages\\Home\\Home.tsx",[],"C:\\APPS\\StoryApp\\client\\src\\pages\\Profile\\Profile.tsx",[],"C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\users\\saga.ts",[],"C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\story\\saga.ts",[],"C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\stories\\sagas.ts",[],"C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\story\\actionCreators.ts",[],"C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\stories\\actionCreators.ts",["183"],"import {Action} from \"redux\";\r\nimport {LoadingStatus} from \"../../types\";\r\nimport {StoryState} from \"../story/reducer\";\r\nimport {AddFormState, NewStory, StoriesState} from \"./reducer\";\r\n\r\nexport enum StoriesActionsTypes {\r\n    FETCH_ALL_STORIES = 'stories/FETCH_ALL_STORIES',\r\n    SET_ALL_STORIES = 'stories/SET_ALL_STORIES',\r\n    FETCH_ADD_STORY = 'stories/FETCH_ADD_STORY',\r\n    SET_ADD_NEW_STORY = 'stories/SET_ADD_NEW_STORY',\r\n    SET_STORIES_LOADING_STATE = 'stories/SET_STORIES_LOADING_STATE',\r\n    SET_ADD_FORM_STATE = 'stories/SET_ADD_FORM_STATE',\r\n}\r\n\r\n//обнулить истории, установив пустой массив, и поставить статус \"загружается\"\r\n//запустить сагу для загрузки историй\r\nexport interface FetchStoriesAI extends Action<StoriesActionsTypes> {\r\n    type: StoriesActionsTypes.FETCH_ALL_STORIES;\r\n}\r\nexport const fetchStoriesAC = (): FetchStoriesAI => ({\r\n    type: StoriesActionsTypes.FETCH_ALL_STORIES,\r\n})\r\n//засетать все прилитевшие истории из саги в стейт\r\nexport interface SetAllStoriesAI extends Action<StoriesActionsTypes> {\r\n    type: StoriesActionsTypes.SET_ALL_STORIES,\r\n    payload: StoriesState['items']\r\n}\r\nexport const setAllStoriesAC = (payload: StoriesState['items']): SetAllStoriesAI => ({\r\n    type: StoriesActionsTypes.SET_ALL_STORIES,\r\n    payload\r\n})\r\n\r\n//добавление новой сторис, запуск саги, и установка статуса \"загрузка\"\r\nexport interface FetchAddStoryAI extends Action<StoriesActionsTypes> {\r\n    type: StoriesActionsTypes.FETCH_ADD_STORY;\r\n    payload: NewStory;\r\n}\r\nexport const fetchAddStoryAC = (payload: NewStory): FetchAddStoryAI => ({\r\n    type: StoriesActionsTypes.FETCH_ADD_STORY,\r\n    payload,\r\n});\r\n//Создать новую историю\r\nexport interface CreateNewStoryAI extends Action<StoriesActionsTypes> {\r\n    type: StoriesActionsTypes.SET_ADD_NEW_STORY,\r\n    payload: NewStory;\r\n}\r\nexport const createNewStoryAC = (payload: NewStory): CreateNewStoryAI => ({\r\n    type: StoriesActionsTypes.SET_ADD_NEW_STORY,\r\n    payload\r\n})\r\n\r\n//установить статус загрузки историй, к примеру ошибка в саге при загрузке\r\nexport interface SetStoriesLoadingStatusAI extends Action<StoriesActionsTypes> {\r\n    type: StoriesActionsTypes.SET_STORIES_LOADING_STATE;\r\n    payload: LoadingStatus;\r\n}\r\nexport const setStoriesLoadingStatusAC = (payload: LoadingStatus): SetStoriesLoadingStatusAI => ({\r\n    type: StoriesActionsTypes.SET_STORIES_LOADING_STATE,\r\n    payload,\r\n})\r\n//статус добавление истории через форму заполнения, к примеру ошибка в саге при загрузке\r\nexport interface SetAddFormStateAI extends Action<StoriesActionsTypes> {\r\n    type: StoriesActionsTypes.SET_ADD_FORM_STATE;\r\n    payload: AddFormState;\r\n}\r\nexport const setAddFormStateAC = (payload: AddFormState): SetAddFormStateAI => ({\r\n    type: StoriesActionsTypes.SET_ADD_FORM_STATE,\r\n    payload,\r\n});\r\n\r\n\r\n\r\n\r\nexport type StoriesActions =\r\n    | FetchStoriesAI\r\n    | SetAllStoriesAI\r\n    | CreateNewStoryAI\r\n    | SetStoriesLoadingStatusAI\r\n    | SetAddFormStateAI\r\n    | FetchAddStoryAI\r\n\r\n","C:\\APPS\\StoryApp\\client\\src\\pages\\SingIn\\index.tsx",[],"C:\\APPS\\StoryApp\\client\\src\\componetns\\ScrollButton.tsx",[],"C:\\APPS\\StoryApp\\client\\src\\restApi\\userApi.ts",[],"C:\\APPS\\StoryApp\\client\\src\\restApi\\storiesApi.ts",[],"C:\\APPS\\StoryApp\\client\\src\\pages\\SingIn\\components\\LoginModal.tsx",[],"C:\\APPS\\StoryApp\\client\\src\\pages\\SingIn\\components\\RegistrationModal.tsx",["184","185"],"import React from \"react\";\r\nimport {ModalBlock} from \"../../../componetns/ModalBlock\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {useStylesSignIn} from \"../theme\";\r\nimport {Notification} from \"../../../componetns/Notification\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from '@hookform/resolvers/yup';\r\nimport * as yup from \"yup\";\r\nimport {FetchRegistrationAC} from \"../../../store/reducers/users/actionCreators\";\r\nimport {Color} from \"@material-ui/lab/Alert\";\r\nimport {selectUserStatus} from \"../../../store/reducers/users/selectors\";\r\nimport {LoadingStatus} from \"../../../store/types\";\r\n\r\ninterface RegisterModalProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nexport interface RegisterFormProps {\r\n    fullname: string;\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n    password2: string;\r\n}\r\n\r\nconst RegisterFormSchema = yup.object().shape({\r\n    fullname: yup.string().required('Введите своё имя'),\r\n    email: yup.string().email('Неверная почта').required('Введите почту'),\r\n    username: yup.string().required('Введите логин'),\r\n    password: yup.string().min(6, '​Минимальная длина пароля 6 символов').required(),\r\n    password2: yup.string().oneOf([yup.ref('password')], 'Пароли не соответствуют'),\r\n});\r\n\r\n// сделать поля tached\r\n//После регистрации бросает сразу на главную, подумать и исправить, там еще нет ни историй, ни токена\r\n//а он положен, только верифицированным пользователям\r\n//На беке сделать переадрисацию на почтовый ящик и правильное закрытие модального окна\r\n{/*БЛОК \"РЕГИСТРАЦИИ\"*/\r\n}\r\nconst RegistrationModal: React.FC<RegisterModalProps> = ({open, onClose}): React.ReactElement => {\r\n    const classes = useStylesSignIn();\r\n    const dispatch = useDispatch();\r\n    const openNotificationRef = React.useRef<(text: string, type: Color) => void>(() => {\r\n    });\r\n    const loadingStatus = useSelector(selectUserStatus);\r\n\r\n    const {control, handleSubmit, errors} = useForm<RegisterFormProps>({\r\n        resolver: yupResolver(RegisterFormSchema)\r\n    });\r\n\r\n    const onSubmit = async (data: RegisterFormProps) => {\r\n        dispatch(FetchRegistrationAC(data));\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (loadingStatus === LoadingStatus.SUCCESS) {\r\n            openNotificationRef.current('Регистрация успешна!', 'success');\r\n            onClose();\r\n        } else if (loadingStatus === LoadingStatus.ERROR) {\r\n            openNotificationRef.current('Ошибка при регистрации!', 'error');\r\n        }\r\n    }, [loadingStatus, onClose]);\r\n\r\n    return (\r\n        <ModalBlock\r\n            visible={open}\r\n            onClose={onClose}\r\n            classes={classes}\r\n            title=\"Войти в аккаунт\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <FormControl className={classes.loginFormControl} component=\"fieldset\" fullWidth>\r\n                    <FormGroup aria-label=\"position\" row>\r\n                        <Controller\r\n                            as={TextField}\r\n                            control={control}\r\n                            name=\"email\"\r\n                            className={classes.registerField}\r\n                            id=\"email\"\r\n                            label=\"E-Mail\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            variant=\"filled\"\r\n                            type=\"email\"\r\n                            defaultValue=\"\"\r\n                            helperText={errors.email?.message}\r\n                            error={!!errors.email}\r\n                            fullWidth\r\n                            autoFocus\r\n                        />\r\n                        <Controller\r\n                            as={TextField}\r\n                            control={control}\r\n                            name=\"username\"\r\n                            className={classes.registerField}\r\n                            id=\"username\"\r\n                            label=\"Логин\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            variant=\"filled\"\r\n                            type=\"text\"\r\n                            defaultValue=\"\"\r\n                            helperText={errors.username?.message}\r\n                            error={!!errors.username}\r\n                            fullWidth\r\n                        />\r\n                        <Controller\r\n                            as={TextField}\r\n                            control={control}\r\n                            name=\"fullname\"\r\n                            className={classes.registerField}\r\n                            id=\"fullname\"\r\n                            label=\"Ваше имя\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            variant=\"filled\"\r\n                            type=\"text\"\r\n                            defaultValue=\"\"\r\n                            helperText={errors.fullname?.message}\r\n                            error={!!errors.fullname}\r\n                            fullWidth\r\n                        />\r\n                        <Controller\r\n                            as={TextField}\r\n                            control={control}\r\n                            name=\"password\"\r\n                            className={classes.registerField}\r\n                            id=\"password\"\r\n                            label=\"Пароль\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            variant=\"filled\"\r\n                            type=\"password\"\r\n                            defaultValue=\"\"\r\n                            helperText={errors.password?.message}\r\n                            error={!!errors.password}\r\n                            fullWidth\r\n                        />\r\n                        <Controller\r\n                            as={TextField}\r\n                            control={control}\r\n                            name=\"password2\"\r\n                            className={classes.registerField}\r\n                            id=\"password2\"\r\n                            label=\"Пароль\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            variant=\"filled\"\r\n                            type=\"password\"\r\n                            defaultValue=\"\"\r\n                            helperText={errors.password2?.message}\r\n                            error={!!errors.password2}\r\n                            fullWidth\r\n                        />\r\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n                            Регистрация\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </ModalBlock>\r\n    )\r\n}\r\n\r\nexport default RegistrationModal","C:\\APPS\\StoryApp\\client\\src\\componetns\\ModalBlock.tsx",[],"C:\\APPS\\StoryApp\\client\\src\\restApi\\axios.ts",[],"C:\\APPS\\StoryApp\\client\\src\\pages\\Profile\\ProfileStyle.ts",[],"C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\stories\\selectors.ts",[],"C:\\APPS\\StoryApp\\client\\src\\pages\\Home\\theme.ts",[],"C:\\APPS\\StoryApp\\client\\src\\componetns\\ProfileAvatar.tsx",[],"C:\\APPS\\StoryApp\\client\\src\\componetns\\FullStory.tsx",[],"C:\\APPS\\StoryApp\\client\\src\\componetns\\Story.tsx",[],"C:\\APPS\\StoryApp\\client\\src\\componetns\\ModalMenu.tsx",[],"C:\\APPS\\StoryApp\\client\\src\\pages\\Home\\RightSide.tsx",[],"C:\\APPS\\StoryApp\\client\\src\\componetns\\HeaderMenu.tsx",[],"C:\\APPS\\StoryApp\\client\\src\\componetns\\AddStoryForm.tsx",["186"],"import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport classNames from 'classnames'\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Button from '@material-ui/core/Button'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ImageOutlinedIcon from '@material-ui/icons/ImageOutlined'\r\nimport EmojiIcon from '@material-ui/icons/SentimentSatisfiedOutlined'\r\nimport {fetchAddStoryAC, fetchStoriesAC} from \"../store/reducers/stories/actionCreators\"\r\nimport {selectStoryData, selectStoryLoadingStatus} from \"../store/reducers/story/selectors\"\r\nimport {selectAddFormState} from \"../store/reducers/stories/selectors\"\r\nimport {Alert} from \"@material-ui/lab\"\r\nimport {clearStoryDataAfterEditAC} from \"../store/reducers/story/actionCreators\"\r\nimport {LoadingStatus} from \"../store/types\"\r\nimport {useHomeStyles} from \"../pages/Home/theme\";\r\nimport {AddFormState, NewStory} from \"../store/reducers/stories/reducer\";\r\n\r\ninterface AddStoryFormProps {\r\n    classes: ReturnType<typeof useHomeStyles>\r\n    maxRows?: number\r\n}\r\n\r\nconst MAX_LENGTH = 3000;\r\n\r\nexport const AddStoryForm: React.FC<AddStoryFormProps> = ({classes, maxRows}: AddStoryFormProps): React.ReactElement => {\r\n    const [title, setTitle] = React.useState<string | undefined>('')\r\n    const [text, setText] = React.useState<string>('')\r\n\r\n    const textCount = MAX_LENGTH - text.length;\r\n    const textLimitPercent = Math.round((text.length / 3000) * 100);\r\n\r\n    const dispatch = useDispatch()\r\n    const addFormState = useSelector(selectAddFormState)\r\n    const story = useSelector(selectStoryData)\r\n    const loadingStatus = useSelector(selectStoryLoadingStatus)\r\n\r\n\r\n    useEffect(() => {\r\n        if (story) {\r\n            if (story.title !== title && story.text !== text) {\r\n                console.log('in UseEffect')\r\n                setTitle(story.title)\r\n                setText(story.text)\r\n            }\r\n        }\r\n    }, [story])\r\n\r\n\r\n    const handleChangeTextareaTitle = (e: React.FormEvent<HTMLTextAreaElement>): void => {\r\n        if (e.currentTarget) {\r\n            setTitle(e.currentTarget.value);\r\n        }\r\n    };\r\n    const handleChangeTextarea = (e: React.FormEvent<HTMLTextAreaElement>): void => {\r\n        if (e.currentTarget) {\r\n            setText(e.currentTarget.value);\r\n        }\r\n    };\r\n\r\n    //добавление истории\r\n    const handleClickAddStory = (): void => {\r\n        //собрать данные из локального стора и отправить в базу\r\n        const data: NewStory = {title, text}\r\n        dispatch(fetchAddStoryAC(data))\r\n        //обнулить локально\r\n        setTitle('')\r\n        setText('')\r\n        //обнулить в глобальном сторе\r\n        dispatch(clearStoryDataAfterEditAC())\r\n    };\r\n\r\n    //редактировать\r\n    const handleClickDoneEdit = (): void => {\r\n        handleClickAddStory()\r\n        //обновить список историй, чтобы избежать дублирования\r\n        dispatch(fetchStoriesAC())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.addFormBody}>\r\n                <div>\r\n                    <Avatar\r\n                        className={classes.storyAvatar}\r\n                        alt={`Аватарка пользователя UserAvatar`}\r\n                        src=\"https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\"\r\n                    />\r\n                </div>\r\n                <div className={classes.addFormTextareaWrapper}>\r\n                    <TextareaAutosize\r\n                        onChange={handleChangeTextareaTitle}\r\n                        className={classes.addFormTextareaTitle}\r\n                        placeholder=\"Введите имя произвидения...\"\r\n                        value={title}\r\n                        rowsMax={maxRows}\r\n                    />\r\n                    <TextareaAutosize\r\n                        onChange={handleChangeTextarea}\r\n                        className={classes.addFormTextarea}\r\n                        placeholder=\"Рассказываете...\"\r\n                        value={text}\r\n                        rowsMax={maxRows}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={classes.addFormBottom}>\r\n                <div className={classNames(classes.storyFooter, classes.addFormBottomActions)}>\r\n                    <IconButton color=\"primary\">\r\n                        <ImageOutlinedIcon style={{fontSize: 26}}/>\r\n                    </IconButton>\r\n                    <IconButton color=\"primary\">\r\n                        <EmojiIcon style={{fontSize: 26}}/>\r\n                    </IconButton>\r\n                </div>\r\n                <div className={classes.addFormBottomRight}>\r\n                    {text && (\r\n                        <>\r\n                            <span>{textCount}</span>\r\n                            <div className={classes.addFormCircleProgress}>\r\n                                <CircularProgress\r\n                                    variant=\"static\"\r\n                                    size={20}\r\n                                    thickness={5}\r\n                                    value={text.length >= MAX_LENGTH ? 100 : textLimitPercent}\r\n                                    style={text.length >= MAX_LENGTH ? {color: 'red'} : undefined}\r\n                                />\r\n                                <CircularProgress\r\n                                    style={{color: 'rgba(0, 0, 0, 0.1)'}}\r\n                                    variant=\"static\"\r\n                                    size={20}\r\n                                    thickness={5}\r\n                                    value={100}\r\n                                />\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                    {loadingStatus === LoadingStatus.REDACTION\r\n                        ? (<Button\r\n                            onClick={handleClickDoneEdit}\r\n                            disabled={addFormState === AddFormState.LOADING || !text || text.length >= MAX_LENGTH}\r\n                            color=\"primary\"\r\n                            variant=\"contained\">\r\n                            {addFormState === AddFormState.LOADING\r\n                                ? (<CircularProgress color=\"inherit\" size={16}/>)\r\n                                : ('Готово')\r\n                            }\r\n                        </Button>)\r\n                        : (<Button\r\n                                onClick={handleClickAddStory}\r\n                                disabled={addFormState === AddFormState.LOADING || !text || text.length >= MAX_LENGTH}\r\n                                color=\"primary\"\r\n                                variant=\"contained\">\r\n                                {addFormState === AddFormState.LOADING\r\n                                    ? (<CircularProgress color=\"inherit\" size={16}/>)\r\n                                    : ('Опубликовать')}\r\n                            </Button>\r\n                        )}\r\n                </div>\r\n            </div>\r\n            {addFormState === AddFormState.ERROR && (\r\n                <Alert severity=\"error\">Ошибка при добавлении{' '}<span aria-label=\"emoji-plak\"\r\n                                                                        role=\"img\">!</span></Alert>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n","C:\\APPS\\StoryApp\\client\\src\\utils\\BackButton.tsx",[],"C:\\APPS\\StoryApp\\client\\src\\store\\reducers\\story\\selectors.ts",[],"C:\\APPS\\StoryApp\\client\\src\\componetns\\SearchTextField.tsx",[],"C:\\APPS\\StoryApp\\client\\src\\utils\\formatDate.ts",[],{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":35,"column":8,"nodeType":"193","endLine":35,"endColumn":25,"suggestions":"194"},{"ruleId":"195","severity":1,"message":"196","line":12,"column":7,"nodeType":"197","messageId":"198","endLine":12,"endColumn":31},{"ruleId":"199","severity":1,"message":"200","line":3,"column":9,"nodeType":"197","messageId":"201","endLine":3,"endColumn":19},{"ruleId":"199","severity":1,"message":"202","line":8,"column":9,"nodeType":"197","messageId":"201","endLine":8,"endColumn":21},{"ruleId":"203","severity":1,"message":"204","line":43,"column":1,"nodeType":"205","messageId":"206","endLine":44,"endColumn":2},{"ruleId":"191","severity":1,"message":"207","line":48,"column":8,"nodeType":"193","endLine":48,"endColumn":15,"suggestions":"208"},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["211"],"@typescript-eslint/no-redeclare","'Layout' is already defined.","Identifier","redeclared","@typescript-eslint/no-unused-vars","'StoryState' is defined but never used.","unusedVar","'Notification' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","React Hook useEffect has missing dependencies: 'text' and 'title'. Either include them or remove the dependency array.",["212"],"no-global-assign","no-unsafe-negation",{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},"Update the dependencies array to be: [history, isAuth, isReady]",{"range":"217","text":"218"},"Update the dependencies array to be: [story, text, title]",{"range":"219","text":"220"},[1576,1593],"[history, isAuth, isReady]",[2083,2090],"[story, text, title]"]