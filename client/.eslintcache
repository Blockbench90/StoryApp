[{"C:\\React\\StoryApp\\client\\src\\index.js":"1","C:\\React\\StoryApp\\client\\src\\store\\store.ts":"2","C:\\React\\StoryApp\\client\\src\\App.tsx":"3","C:\\React\\StoryApp\\client\\src\\theme.jsx":"4","C:\\React\\StoryApp\\client\\src\\store\\saga.ts":"5","C:\\React\\StoryApp\\client\\src\\store\\types.ts":"6","C:\\React\\StoryApp\\client\\src\\store\\reducers\\stories\\reducer.ts":"7","C:\\React\\StoryApp\\client\\src\\store\\reducers\\users\\selectors.ts":"8","C:\\React\\StoryApp\\client\\src\\store\\reducers\\story\\reducer.ts":"9","C:\\React\\StoryApp\\client\\src\\store\\reducers\\users\\reducer.ts":"10","C:\\React\\StoryApp\\client\\src\\pages\\SingIn\\theme.ts":"11","C:\\React\\StoryApp\\client\\src\\pages\\Layout.tsx":"12","C:\\React\\StoryApp\\client\\src\\pages\\Notification\\Notification.tsx":"13","C:\\React\\StoryApp\\client\\src\\pages\\Bookmarks\\Bookmarks.tsx":"14","C:\\React\\StoryApp\\client\\src\\pages\\Messages\\Messages.tsx":"15","C:\\React\\StoryApp\\client\\src\\pages\\Home\\Home.tsx":"16","C:\\React\\StoryApp\\client\\src\\store\\reducers\\story\\saga.ts":"17","C:\\React\\StoryApp\\client\\src\\store\\reducers\\stories\\sagas.ts":"18","C:\\React\\StoryApp\\client\\src\\store\\reducers\\users\\actionCreators.ts":"19","C:\\React\\StoryApp\\client\\src\\store\\reducers\\story\\actionCreators.ts":"20","C:\\React\\StoryApp\\client\\src\\store\\reducers\\users\\saga.ts":"21","C:\\React\\StoryApp\\client\\src\\store\\reducers\\stories\\actionCreators.ts":"22","C:\\React\\StoryApp\\client\\src\\store\\reducers\\stories\\selectors.ts":"23","C:\\React\\StoryApp\\client\\src\\pages\\SingIn\\index.tsx":"24","C:\\React\\StoryApp\\client\\src\\pages\\Home\\theme.ts":"25","C:\\React\\StoryApp\\client\\src\\pages\\Profile\\index.tsx":"26","C:\\React\\StoryApp\\client\\src\\componetns\\ScrollButton.tsx":"27","C:\\React\\StoryApp\\client\\src\\restApi\\storiesApi.ts":"28","C:\\React\\StoryApp\\client\\src\\restApi\\userApi.ts":"29","C:\\React\\StoryApp\\client\\src\\pages\\SingIn\\components\\RegistrationModal.tsx":"30","C:\\React\\StoryApp\\client\\src\\pages\\Profile\\ProfileStories.tsx":"31","C:\\React\\StoryApp\\client\\src\\pages\\Profile\\ProfileInfo.tsx":"32","C:\\React\\StoryApp\\client\\src\\restApi\\axios.ts":"33","C:\\React\\StoryApp\\client\\src\\pages\\Profile\\ProfileStyle.ts":"34","C:\\React\\StoryApp\\client\\src\\componetns\\CustomNotification.tsx":"35","C:\\React\\StoryApp\\client\\src\\componetns\\ProfileAvatar.tsx":"36","C:\\React\\StoryApp\\client\\src\\componetns\\ProfileStory.tsx":"37","C:\\React\\StoryApp\\client\\src\\componetns\\AddStoryForm\\AddStoryForm.tsx":"38","C:\\React\\StoryApp\\client\\src\\componetns\\ModalBlock.tsx":"39","C:\\React\\StoryApp\\client\\src\\utils\\formatDate.ts":"40","C:\\React\\StoryApp\\client\\src\\utils\\uploadFile.ts":"41","C:\\React\\StoryApp\\client\\src\\store\\reducers\\story\\selectors.ts":"42","C:\\React\\StoryApp\\client\\src\\componetns\\AddStoryForm\\addStoryStyles.ts":"43","C:\\React\\StoryApp\\client\\src\\componetns\\UploadImages.tsx":"44","C:\\React\\StoryApp\\client\\src\\componetns\\ImageList.tsx":"45","C:\\React\\StoryApp\\client\\src\\pages\\SingIn\\components\\LoginModal.tsx":"46","C:\\React\\StoryApp\\client\\src\\componetns\\BackButton.tsx":"47","C:\\React\\StoryApp\\client\\src\\componetns\\FullStory.tsx":"48","C:\\React\\StoryApp\\client\\src\\componetns\\ModalMenu.tsx":"49","C:\\React\\StoryApp\\client\\src\\componetns\\Story.tsx":"50","C:\\React\\StoryApp\\client\\src\\componetns\\HeaderMenu.tsx":"51","C:\\React\\StoryApp\\client\\src\\pages\\Home\\RightSide.tsx":"52","C:\\React\\StoryApp\\client\\src\\componetns\\SearchTextField.tsx":"53","C:\\React\\StoryApp\\client\\src\\componetns\\UploadAvatar.tsx":"54","C:\\React\\StoryApp\\client\\src\\utils\\uploadAvatar.ts":"55"},{"size":656,"mtime":1612641568181,"results":"56","hashOfConfig":"57"},{"size":1056,"mtime":1612641568200,"results":"58","hashOfConfig":"57"},{"size":2153,"mtime":1612797451582,"results":"59","hashOfConfig":"57"},{"size":2542,"mtime":1612641568201,"results":"60","hashOfConfig":"57"},{"size":295,"mtime":1612641568200,"results":"61","hashOfConfig":"57"},{"size":179,"mtime":1612641568201,"results":"62","hashOfConfig":"57"},{"size":2387,"mtime":1612641568195,"results":"63","hashOfConfig":"57"},{"size":1874,"mtime":1612641568200,"results":"64","hashOfConfig":"57"},{"size":1904,"mtime":1612641568196,"results":"65","hashOfConfig":"57"},{"size":2271,"mtime":1612641568198,"results":"66","hashOfConfig":"57"},{"size":1744,"mtime":1612641568192,"results":"67","hashOfConfig":"57"},{"size":1245,"mtime":1612641568184,"results":"68","hashOfConfig":"57"},{"size":3623,"mtime":1612641568187,"results":"69","hashOfConfig":"57"},{"size":5955,"mtime":1612641568182,"results":"70","hashOfConfig":"57"},{"size":14958,"mtime":1612641568185,"results":"71","hashOfConfig":"57"},{"size":3106,"mtime":1612797487635,"results":"72","hashOfConfig":"57"},{"size":2176,"mtime":1612641568197,"results":"73","hashOfConfig":"57"},{"size":1428,"mtime":1612641568195,"results":"74","hashOfConfig":"57"},{"size":4183,"mtime":1612641568198,"results":"75","hashOfConfig":"57"},{"size":2999,"mtime":1612641568196,"results":"76","hashOfConfig":"57"},{"size":3489,"mtime":1613126767122,"results":"77","hashOfConfig":"57"},{"size":3320,"mtime":1612641568194,"results":"78","hashOfConfig":"57"},{"size":1594,"mtime":1612789951462,"results":"79","hashOfConfig":"57"},{"size":2528,"mtime":1612802562673,"results":"80","hashOfConfig":"57"},{"size":8707,"mtime":1612641568184,"results":"81","hashOfConfig":"57"},{"size":1471,"mtime":1612794735347,"results":"82","hashOfConfig":"57"},{"size":2244,"mtime":1612641568177,"results":"83","hashOfConfig":"57"},{"size":1213,"mtime":1612641568193,"results":"84","hashOfConfig":"57"},{"size":1937,"mtime":1613147264558,"results":"85","hashOfConfig":"57"},{"size":6229,"mtime":1612804833170,"results":"86","hashOfConfig":"57"},{"size":1896,"mtime":1612795885303,"results":"87","hashOfConfig":"57"},{"size":3732,"mtime":1613141616873,"results":"88","hashOfConfig":"57"},{"size":255,"mtime":1612641568192,"results":"89","hashOfConfig":"57"},{"size":5917,"mtime":1612797331325,"results":"90","hashOfConfig":"57"},{"size":1368,"mtime":1612806720209,"results":"91","hashOfConfig":"57"},{"size":4131,"mtime":1613147328647,"results":"92","hashOfConfig":"57"},{"size":6822,"mtime":1612806819263,"results":"93","hashOfConfig":"57"},{"size":9646,"mtime":1613136806990,"results":"94","hashOfConfig":"57"},{"size":1285,"mtime":1612641568175,"results":"95","hashOfConfig":"57"},{"size":235,"mtime":1612641568202,"results":"96","hashOfConfig":"57"},{"size":476,"mtime":1613136806881,"results":"97","hashOfConfig":"57"},{"size":1173,"mtime":1612641568197,"results":"98","hashOfConfig":"57"},{"size":2238,"mtime":1612641568173,"results":"99","hashOfConfig":"57"},{"size":2338,"mtime":1613135659614,"results":"100","hashOfConfig":"57"},{"size":1097,"mtime":1612641568175,"results":"101","hashOfConfig":"57"},{"size":4277,"mtime":1612807538146,"results":"102","hashOfConfig":"57"},{"size":535,"mtime":1612641568173,"results":"103","hashOfConfig":"57"},{"size":5589,"mtime":1612641568174,"results":"104","hashOfConfig":"57"},{"size":1411,"mtime":1612641568175,"results":"105","hashOfConfig":"57"},{"size":4571,"mtime":1612641568178,"results":"106","hashOfConfig":"57"},{"size":4665,"mtime":1612641568174,"results":"107","hashOfConfig":"57"},{"size":5020,"mtime":1612641568183,"results":"108","hashOfConfig":"57"},{"size":1014,"mtime":1612641568177,"results":"109","hashOfConfig":"57"},{"size":1929,"mtime":1613137963409,"results":"110","hashOfConfig":"57"},{"size":480,"mtime":1613136806938,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"w0zgde",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"117"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"117"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"117"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"117"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"117"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"117"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"117"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"117"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"117"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"117"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"117"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"117"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"117"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"117"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"117"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"117"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"117"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"237"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"117"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},"C:\\React\\StoryApp\\client\\src\\index.js",[],["243","244"],"C:\\React\\StoryApp\\client\\src\\store\\store.ts",[],["245","246"],"C:\\React\\StoryApp\\client\\src\\App.tsx",["247"],"import React, {useEffect} from 'react';\r\nimport {Route, Switch, useHistory} from 'react-router-dom'\r\nimport {SignIn} from \"./pages/SingIn\";\r\nimport {Notification} from './pages/Notification/Notification'\r\nimport Layout from \"./pages/Layout\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {ProfilePage} from \"./pages/Profile\";\r\nimport {Home} from \"./pages/Home/Home\";\r\nimport {useStylesSignIn} from \"./pages/SingIn/theme\";\r\nimport ImportContactsOutlinedIcon from \"@material-ui/icons/ImportContactsOutlined\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {selectUserStatus} from \"./store/reducers/users/selectors\";\r\nimport {LoadingStatus} from \"./store/types\";\r\nimport {Messages} from './pages/Messages/Messages';\r\nimport {Bookmarks} from \"./pages/Bookmarks/Bookmarks\";\r\n\r\n\r\nconst App = () => {\r\n    const classes = useStylesSignIn()\r\n    const history = useHistory()\r\n    const loadingStatus = useSelector(selectUserStatus)\r\n\r\n    //говорит к полной готовности загрузки\r\n    const isReady = loadingStatus === LoadingStatus.LOADING\r\n    const token = !!window.localStorage.getItem('token')\r\n\r\n    useEffect(() => {\r\n        token ? history.push('/home') : history.push('/signin')\r\n    }, [token]);\r\n\r\n    if (isReady) {\r\n        return (\r\n            <div className={classes.loadingApp}>\r\n                <ImportContactsOutlinedIcon className={classes.loadingIcon} aria-label=\"\" color=\"secondary\"/>\r\n                <CircularProgress className={classes.loadingStatusBar}/>\r\n            </div>)\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <Switch>\r\n                <Route path=\"/signin\" component={SignIn} exact/>\r\n                <Layout>\r\n                    <Route path=\"/home\" component={Home}/>\r\n                    <Route path=\"/profile\" component={ProfilePage}/>\r\n                    <Route path=\"/notification\" component={Notification}/>\r\n                    <Route path=\"/messages\" component={Messages}/>\r\n                    <Route path=\"/bookmarks\" component={Bookmarks}/>\r\n                </Layout>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","C:\\React\\StoryApp\\client\\src\\theme.jsx",[],"C:\\React\\StoryApp\\client\\src\\store\\saga.ts",[],"C:\\React\\StoryApp\\client\\src\\store\\types.ts",[],"C:\\React\\StoryApp\\client\\src\\store\\reducers\\stories\\reducer.ts",[],"C:\\React\\StoryApp\\client\\src\\store\\reducers\\users\\selectors.ts",["248"],"import {RootState} from \"../../store\";\r\nimport {User, UserState} from \"./reducer\";\r\nimport {LoadingStatus} from \"../../types\";\r\n\r\n//state user полностью\r\nexport const selectUserState = (state: RootState): UserState => state.user\r\n\r\n//только дата\r\nexport const selectUserData = (state: RootState): UserState['data'] => selectUserState(state).data\r\n\r\n//достать id пользователя\r\nexport const selectUserDataID = (state: RootState): string => selectUserState(state).data._id\r\n\r\n//только истории\r\nexport const selectUserStories = (state: RootState): UserState['stories'] => selectUserState(state).stories\r\n\r\n//только статус\r\nexport const selectUserStatus = (state: RootState): UserState['status'] => selectUserState(state).status\r\n\r\n//только статус загрузки историй\r\nexport const selectUserLoadingStories = (state: RootState): UserState['storiesLoading'] => selectUserState(state).storiesLoading\r\n\r\n//булево значинеи, наличия данных в дате\r\nexport const selectUserIsAuth = (state: RootState): boolean => !!selectUserState(state).data\r\n\r\n//булево значинеи, наличия данных в историях юзера\r\nexport const selectUserDataStories = (state: RootState): boolean => !!selectUserState(state).stories\r\n\r\n//булево значение, если статус загрузки назодиться в \"ЗАГРУЗКА\\LOADING\\ЗАГРУЖАЕТСЯ\"\r\nexport const selectUserIsLoading = (state: RootState): boolean =>\r\n    selectUserState(state).status === LoadingStatus.LOADING\r\n\r\n//булево значение, если статус загрузки назодиться в \"ЗАГРУЖЕН\\LOADED\"\r\nexport const selectUserIsLoaded = (state: RootState): boolean =>\r\n    selectUserState(state).status === LoadingStatus.LOADED","C:\\React\\StoryApp\\client\\src\\store\\reducers\\story\\reducer.ts",[],"C:\\React\\StoryApp\\client\\src\\store\\reducers\\users\\reducer.ts",["249"],"import produce, {Draft} from \"immer\";\r\nimport {LoadingStatus} from \"../../types\";\r\nimport {UserActions, UserActionsType} from \"./actionCreators\";\r\nimport {Story} from \"../stories/reducer\";\r\n\r\nexport interface User {\r\n    _id: string\r\n    email: string\r\n    fullname: string\r\n    username: string\r\n    password: string\r\n    confirmHash: string\r\n    confirmed?: boolean\r\n    location?: string\r\n    about?: string\r\n    website?: string\r\n}\r\n\r\nexport interface UserState {\r\n    data?: User | undefined\r\n    stories: Story[] | undefined\r\n    storiesLoading: LoadingStatus\r\n    status: LoadingStatus\r\n}\r\nconst data = {\r\n    _id: '',\r\n    email: '',\r\n    fullname: '',\r\n    username: '',\r\n    password: '',\r\n    confirmHash: '',\r\n    confirmed: false,\r\n    location: '',\r\n    about: '',\r\n    website: ''\r\n}\r\n\r\nconst initialState: UserState = {\r\n    data: undefined,\r\n    stories: undefined,\r\n    storiesLoading: LoadingStatus.NEVER,\r\n    status: LoadingStatus.NEVER,\r\n}\r\n\r\n//редьюсер пользователя\r\nexport const userReducer = produce((draft: Draft<UserState>, action: UserActions) => {\r\n    switch (action.type) {\r\n        //на случай успешной логинизации, вернет статус \"success\" и данные на юзера\r\n        case UserActionsType.SET_USER_DATA:\r\n            draft.data = action.payload\r\n            draft.status = LoadingStatus.SUCCESS\r\n            break\r\n        //начать запрос на все истории юзера\r\n        case UserActionsType.FETCH_ALL_USER_STORIES:\r\n            draft.stories = undefined\r\n            break\r\n        //засетать все истории юзера\r\n        case UserActionsType.SET_ALL_USER_STORIES:\r\n            draft.stories = action.payload\r\n            draft.storiesLoading = LoadingStatus.LOADED\r\n            break\r\n        //установка статуса\r\n        case UserActionsType.SET_LOADING_STATUS_STATE:\r\n            draft.status = action.payload\r\n            break\r\n        //установка статуса загрузки историй\r\n        case UserActionsType.SET_LOADING_STATUS_STORIES:\r\n            draft.storiesLoading = action.payload\r\n            break\r\n\r\n        default:\r\n            break\r\n    }\r\n}, initialState)\r\n","C:\\React\\StoryApp\\client\\src\\pages\\SingIn\\theme.ts",[],"C:\\React\\StoryApp\\client\\src\\pages\\Layout.tsx",["250"],"import React, {useEffect} from 'react';\r\nimport {Container, Grid} from '@material-ui/core';\r\nimport {HeaderMenu} from \"../componetns/HeaderMenu\";\r\nimport {useHomeStyles} from \"./Home/theme\";\r\nimport RightSide from \"./Home/RightSide\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchStoriesAC} from \"../store/reducers/stories/actionCreators\";\r\ninterface Layout {\r\n    children: React.ReactNode\r\n}\r\n\r\nconst Layout: React.FC<Layout> = ({children}): React.ReactElement => {\r\n    const dispatch = useDispatch()\r\n    const classes = useHomeStyles()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchStoriesAC())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.wrapper}>\r\n            {/*spacing - расстояние между блоками гридов*/}\r\n            <Grid container spacing={2}>\r\n                <Grid xs={12} item>\r\n                    <HeaderMenu classes={classes}/>\r\n                </Grid>\r\n\r\n                <Grid xs={10} item>\r\n                    {children}\r\n                </Grid>\r\n\r\n                <Grid xs={2} item>\r\n                    <RightSide classes={classes}/>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\nexport default Layout\r\n","C:\\React\\StoryApp\\client\\src\\pages\\Notification\\Notification.tsx",[],"C:\\React\\StoryApp\\client\\src\\pages\\Bookmarks\\Bookmarks.tsx",[],"C:\\React\\StoryApp\\client\\src\\pages\\Messages\\Messages.tsx",[],"C:\\React\\StoryApp\\client\\src\\pages\\Home\\Home.tsx",[],"C:\\React\\StoryApp\\client\\src\\store\\reducers\\story\\saga.ts",["251"],"import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {\r\n    DeleteStoryByIdAI,\r\n    FetchEditStoryDataAI,\r\n    FetchStoryDataAI,\r\n    setStoryByIdAC,\r\n    setStoryLoadingStatusAC,\r\n    StoryActionsTypes\r\n} from \"./actionCreators\"\r\nimport {Story} from \"../stories/reducer\";\r\nimport {StoriesApi} from \"../../../restApi/storiesApi\";\r\nimport {LoadingStatus} from \"../../types\";\r\nimport {fetchStoriesRequest} from \"../stories/sagas\";\r\nimport {FetchUserStoriesAC} from \"../users/actionCreators\";\r\nimport {fetchUserStoriesRequest} from \"../users/saga\";\r\n\r\n\r\n//получить конкретную историю по id\r\nexport function* fetchStoryDataRequest ({payload: _id}: FetchStoryDataAI) {\r\n    try {\r\n        const data: Story = yield call(StoriesApi.getStory, _id)\r\n        yield put(setStoryByIdAC(data))\r\n    } catch (error) {\r\n        yield put(setStoryLoadingStatusAC(LoadingStatus.ERROR))\r\n    }\r\n}\r\n\r\n//редактировать историю\r\nexport function* editStoryDataRequest ({payload: _id}: FetchEditStoryDataAI){\r\n    try {\r\n        const data: Story = yield call(StoriesApi.getStory, _id)\r\n        yield put(setStoryByIdAC(data))\r\n        const res = yield call(StoriesApi.deleteStory, _id)\r\n        if(res.status === 200) {\r\n            yield put(setStoryLoadingStatusAC(LoadingStatus.REDACTION))\r\n        }\r\n    } catch (error) {\r\n        yield put(setStoryLoadingStatusAC(LoadingStatus.ERROR))\r\n    }\r\n}\r\n\r\n//удалить историю\r\nexport function* deleteStoryDataRequest({payload}: DeleteStoryByIdAI) {\r\n    try  {\r\n        const data: any = yield call(StoriesApi.deleteStory, payload._id)\r\n        if(data.status === 200) {\r\n            yield call(fetchStoriesRequest)\r\n            yield put(FetchUserStoriesAC(payload.userId))\r\n        }\r\n    } catch (error) {\r\n        yield put(setStoryLoadingStatusAC(LoadingStatus.ERROR))\r\n    }\r\n}\r\n\r\nexport function* storySaga() {\r\n    yield takeLatest(StoryActionsTypes.FETCH_STORY_BY_ID, fetchStoryDataRequest)\r\n    yield takeLatest(StoryActionsTypes.FETCH_EDIT_STORY_BY_ID, editStoryDataRequest)\r\n    yield takeLatest(StoryActionsTypes.DELETE_STORY_BY_ID, deleteStoryDataRequest)\r\n}\r\n\r\n","C:\\React\\StoryApp\\client\\src\\store\\reducers\\stories\\sagas.ts",[],"C:\\React\\StoryApp\\client\\src\\store\\reducers\\users\\actionCreators.ts",[],"C:\\React\\StoryApp\\client\\src\\store\\reducers\\story\\actionCreators.ts",[],"C:\\React\\StoryApp\\client\\src\\store\\reducers\\users\\saga.ts",[],"C:\\React\\StoryApp\\client\\src\\store\\reducers\\stories\\actionCreators.ts",["252"],"import {Action} from \"redux\";\r\nimport {LoadingStatus} from \"../../types\";\r\nimport {StoryState} from \"../story/reducer\";\r\nimport {AddFormState, NewStory, StoriesState, Story} from \"./reducer\";\r\n\r\nexport enum StoriesActionsTypes {\r\n    FETCH_ALL_STORIES = 'stories/FETCH_ALL_STORIES',\r\n    SET_ALL_STORIES = 'stories/SET_ALL_STORIES',\r\n    FETCH_ADD_STORY = 'stories/FETCH_ADD_STORY',\r\n    SET_ADD_NEW_STORY = 'stories/SET_ADD_NEW_STORY',\r\n    SET_STORIES_LOADING_STATE = 'stories/SET_STORIES_LOADING_STATE',\r\n    SET_ADD_FORM_STATE = 'stories/SET_ADD_FORM_STATE',\r\n}\r\n\r\n//обнулить истории, установив пустой массив, и поставить статус \"загружается\"\r\n//запустить сагу для загрузки историй\r\nexport interface FetchStoriesAI extends Action<StoriesActionsTypes> {\r\n    type: StoriesActionsTypes.FETCH_ALL_STORIES;\r\n}\r\nexport const fetchStoriesAC = (): FetchStoriesAI => ({\r\n    type: StoriesActionsTypes.FETCH_ALL_STORIES,\r\n})\r\n//засетать все прилитевшие истории из саги в стейт\r\nexport interface SetAllStoriesAI extends Action<StoriesActionsTypes> {\r\n    type: StoriesActionsTypes.SET_ALL_STORIES,\r\n    payload: StoriesState['items']\r\n}\r\nexport const setAllStoriesAC = (payload: StoriesState['items']): SetAllStoriesAI => ({\r\n    type: StoriesActionsTypes.SET_ALL_STORIES,\r\n    payload\r\n})\r\n\r\n//добавление новой сторис, запуск саги, и установка статуса \"загрузка\"\r\nexport interface FetchAddStoryAI extends Action<StoriesActionsTypes> {\r\n    type: StoriesActionsTypes.FETCH_ADD_STORY;\r\n    payload: NewStory;\r\n}\r\nexport const fetchAddStoryAC = (payload: NewStory): FetchAddStoryAI => ({\r\n    type: StoriesActionsTypes.FETCH_ADD_STORY,\r\n    payload,\r\n});\r\n//Создать новую историю\r\nexport interface CreateNewStoryAI extends Action<StoriesActionsTypes> {\r\n    type: StoriesActionsTypes.SET_ADD_NEW_STORY,\r\n    payload: Story;\r\n}\r\nexport const createNewStoryAC = (payload: Story): CreateNewStoryAI => ({\r\n    type: StoriesActionsTypes.SET_ADD_NEW_STORY,\r\n    payload\r\n})\r\n\r\n//установить статус загрузки историй, к примеру ошибка в саге при загрузке\r\nexport interface SetStoriesLoadingStatusAI extends Action<StoriesActionsTypes> {\r\n    type: StoriesActionsTypes.SET_STORIES_LOADING_STATE;\r\n    payload: LoadingStatus;\r\n}\r\nexport const setStoriesLoadingStatusAC = (payload: LoadingStatus): SetStoriesLoadingStatusAI => ({\r\n    type: StoriesActionsTypes.SET_STORIES_LOADING_STATE,\r\n    payload,\r\n})\r\n//статус добавление истории через форму заполнения, к примеру ошибка в саге при загрузке\r\nexport interface SetAddFormStateAI extends Action<StoriesActionsTypes> {\r\n    type: StoriesActionsTypes.SET_ADD_FORM_STATE;\r\n    payload: AddFormState;\r\n}\r\nexport const setAddFormStateAC = (payload: AddFormState): SetAddFormStateAI => ({\r\n    type: StoriesActionsTypes.SET_ADD_FORM_STATE,\r\n    payload,\r\n});\r\n\r\n\r\n\r\n\r\nexport type StoriesActions =\r\n    | FetchStoriesAI\r\n    | SetAllStoriesAI\r\n    | CreateNewStoryAI\r\n    | SetStoriesLoadingStatusAI\r\n    | SetAddFormStateAI\r\n    | FetchAddStoryAI\r\n\r\n","C:\\React\\StoryApp\\client\\src\\store\\reducers\\stories\\selectors.ts",["253"],"import {AddFormState, StoriesState} from \"./reducer\";\r\nimport {RootState} from \"../../store\";\r\nimport {LoadingStatus} from \"../../types\";\r\nimport {selectUserState} from \"../users/selectors\";\r\n//достать из глобального стейта, ветку stories\r\nexport const selectStoriesState = (state: RootState): StoriesState => state.stories\r\n\r\n//достать актуальный статус из стейта\r\nexport const selectLoadingStatus = (state: RootState): LoadingStatus => selectStoriesState(state).LoadingStatus\r\n\r\n//достать актуальный статус добавления истории через форму заполнения\r\nexport const selectAddFormState = (state: RootState): AddFormState => selectStoriesState(state).addFormState\r\n\r\n//вернуть true | false в зависимости от загрузки\r\nexport const selectIsStoriesLoading = (state: RootState): boolean => selectLoadingStatus(state) === LoadingStatus.LOADING;\r\n\r\n//вернуть true | false в зависимости от загрузки\r\nexport const selectIsStoriesLoaded = (state: RootState): boolean => selectLoadingStatus(state) === LoadingStatus.LOADED;\r\n\r\n//достать только items из отдельной ветки глобально стейта, stories\r\nexport const selectStoriesItems = (state: RootState) => selectStoriesState(state).items;\r\n\r\n//булево значинеи, наличия данных в историях юзера\r\nexport const selectStoriesIsItems = (state: RootState): boolean => !!selectStoriesState(state).items\r\n","C:\\React\\StoryApp\\client\\src\\pages\\SingIn\\index.tsx",[],"C:\\React\\StoryApp\\client\\src\\pages\\Home\\theme.ts",[],"C:\\React\\StoryApp\\client\\src\\pages\\Profile\\index.tsx",["254"],"import React, {useEffect} from \"react\"\r\nimport {useProfileStyles} from \"./ProfileStyle\"\r\nimport ScrollButton from \"../../componetns/ScrollButton\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    selectUserData,\r\n    selectUserDataStories,\r\n    selectUserIsAuth,\r\n    selectUserStories\r\n} from \"../../store/reducers/users/selectors\";\r\nimport {FetchAuthAC, FetchUserStoriesAC} from \"../../store/reducers/users/actionCreators\";\r\nimport {ProfileInfo} from \"./ProfileInfo\";\r\nimport {ProfileStories} from \"./ProfileStories\";\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\n\r\nexport const ProfilePage = () => {\r\n    const classes = useProfileStyles();\r\n    const dispatch = useDispatch()\r\n\r\n    const userData = useSelector(selectUserData)\r\n    const userIsAuth = useSelector(selectUserIsAuth)\r\n    const stories = useSelector(selectUserStories)\r\n    const isStories = useSelector(selectUserDataStories)\r\n\r\n    useEffect(() => {\r\n        if (userIsAuth) {\r\n            dispatch(FetchUserStoriesAC(userData._id))\r\n        } else {\r\n            dispatch(FetchAuthAC())\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <ScrollButton>\r\n            <div className={classes.wrapper}>\r\n                <Grid container spacing={2}>\r\n                    <ProfileInfo stories={stories} userData={userData}/>\r\n                    <ProfileStories stories={stories} isStories={isStories}/>\r\n                </Grid>\r\n            </div>\r\n        </ScrollButton>\r\n    )\r\n}\r\n","C:\\React\\StoryApp\\client\\src\\componetns\\ScrollButton.tsx",[],"C:\\React\\StoryApp\\client\\src\\restApi\\storiesApi.ts",["255"],"import axios from 'axios'\r\nimport {NewStory, Story} from \"../store/reducers/stories/reducer\";\r\n\r\n\r\ninterface Response<T> {\r\n    status: string\r\n    data: T\r\n}\r\n\r\n//запросы для работы с историями\r\nexport const StoriesApi = {\r\n    //получить все истории\r\n    async getStories(): Promise<Story[]> {\r\n        const {data} = await axios.get<Response<Story[]>>('/stories')\r\n        return data.data\r\n    },\r\n    //получить конктетную историю\r\n    async getStory(_id: string): Promise<Story> {\r\n        const {data} = await axios.get<Response<Story>>(`/stories/${_id}`)\r\n        return data.data\r\n    },\r\n    //добавить историю\r\n    async addStory(payload: {title?: string, text: string, images?: string[]}): Promise<any>{\r\n        const { data } = await axios.post<Response<Story>>('/stories', payload)\r\n        console.log('data.data в апишке, после запроса на бек =', data.data)\r\n        return data.data\r\n    },\r\n    //удалить историю\r\n    async deleteStory(id: string): Promise<any> {\r\n        const data = await axios.delete<Response<Story>>(`/stories/${id}`)\r\n        return data\r\n    }\r\n}\r\n","C:\\React\\StoryApp\\client\\src\\restApi\\userApi.ts",[],"C:\\React\\StoryApp\\client\\src\\pages\\SingIn\\components\\RegistrationModal.tsx",["256","257"],"import React, {useEffect, useState} from \"react\";\r\nimport {ModalBlock} from \"../../../componetns/ModalBlock\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {useStylesSignIn} from \"../theme\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from '@hookform/resolvers/yup';\r\nimport * as yup from \"yup\";\r\nimport {FetchRegistrationAC} from \"../../../store/reducers/users/actionCreators\";\r\nimport {selectUserStatus} from \"../../../store/reducers/users/selectors\";\r\nimport {LoadingStatus} from \"../../../store/types\";\r\nimport {CustomNotification} from \"../../../componetns/CustomNotification\";\r\n\r\ninterface RegisterModalProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nexport interface RegisterFormProps {\r\n    fullname: string;\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n    password2: string;\r\n}\r\n\r\nconst RegisterFormSchema = yup.object().shape({\r\n    fullname: yup.string().required('Введите своё имя'),\r\n    email: yup.string().email('Неверная почта').required('Введите почту'),\r\n    username: yup.string().required('Введите логин'),\r\n    password: yup.string().min(6, '​Минимальная длина пароля 6 символов').required(),\r\n    password2: yup.string().oneOf([yup.ref('password')], 'Пароли не соответствуют'),\r\n});\r\n\r\n{/*БЛОК \"РЕГИСТРАЦИИ\"*/\r\n}\r\nconst RegistrationModal: React.FC<RegisterModalProps> = ({open, onClose}): React.ReactElement => {\r\n    const classes = useStylesSignIn();\r\n    const dispatch = useDispatch();\r\n\r\n    const loadingStatus = useSelector(selectUserStatus);\r\n    const [message, setMessage] = useState<'error' | 'success'>()\r\n\r\n    const {control, handleSubmit, errors} = useForm<RegisterFormProps>({\r\n        resolver: yupResolver(RegisterFormSchema)\r\n    });\r\n\r\n    const onSubmit = async (data: RegisterFormProps) => {\r\n        dispatch(FetchRegistrationAC(data));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (loadingStatus === LoadingStatus.SUCCESS) {\r\n            setMessage('success')\r\n        } else if (loadingStatus === LoadingStatus.ERROR) {\r\n            setMessage('error')\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {message === 'error' ? <CustomNotification isOpen={true} type={'error'}\r\n                                                       text={'Где-то Вы, уважаемый, дали в штангу 😄'} autoHide={5000}/> : null}\r\n            {message === 'success' ? <CustomNotification isOpen={true} type={'success'}\r\n                                                       text={'Поздравляем, аккаунт создан. Бегите на почту за подтверждением 👍'} autoHide={15000}/> : null}\r\n            <ModalBlock visible={open} onClose={onClose} classes={classes} title=\"Создать аккаунт\">\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <FormControl className={classes.loginFormControl} component=\"fieldset\" fullWidth>\r\n                        <FormGroup aria-label=\"position\" row>\r\n                            <Controller as={TextField} control={control} name=\"email\" className={classes.registerField}\r\n                                        id=\"email\" label=\"E-Mail\" InputLabelProps={{shrink: true}} variant=\"filled\"\r\n                                        type=\"email\" defaultValue=\"\" helperText={errors.email?.message}\r\n                                        error={!!errors.email}\r\n                                        fullWidth autoFocus/>\r\n\r\n                            <Controller as={TextField} control={control} name=\"username\"\r\n                                        className={classes.registerField}\r\n                                        id=\"username\" label=\"Логин\" InputLabelProps={{shrink: true}} variant=\"filled\"\r\n                                        type=\"text\"\r\n                                        defaultValue=\"\" helperText={errors.username?.message} error={!!errors.username}\r\n                                        fullWidth/>\r\n\r\n                            <Controller as={TextField} control={control} name=\"fullname\"\r\n                                        className={classes.registerField}\r\n                                        id=\"fullname\" label=\"Ваше имя\" InputLabelProps={{shrink: true}} variant=\"filled\"\r\n                                        type=\"text\" defaultValue=\"\" helperText={errors.fullname?.message}\r\n                                        error={!!errors.fullname}\r\n                                        fullWidth/>\r\n\r\n                            <Controller as={TextField} control={control} name=\"password\"\r\n                                        className={classes.registerField}\r\n                                        id=\"password\" label=\"Пароль\" InputLabelProps={{shrink: true}} variant=\"filled\"\r\n                                        type=\"password\"\r\n                                        defaultValue=\"\" helperText={errors.password?.message} error={!!errors.password}\r\n                                        fullWidth/>\r\n\r\n                            <Controller as={TextField} control={control} name=\"password2\"\r\n                                        className={classes.registerField}\r\n                                        id=\"password2\" label=\"Пароль\" InputLabelProps={{shrink: true}} variant=\"filled\"\r\n                                        type=\"password\"\r\n                                        defaultValue=\"\" helperText={errors.password2?.message}\r\n                                        error={!!errors.password2} fullWidth/>\r\n\r\n                            <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>Регистрация</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </ModalBlock>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RegistrationModal","C:\\React\\StoryApp\\client\\src\\pages\\Profile\\ProfileStories.tsx",[],"C:\\React\\StoryApp\\client\\src\\pages\\Profile\\ProfileInfo.tsx",[],"C:\\React\\StoryApp\\client\\src\\restApi\\axios.ts",[],"C:\\React\\StoryApp\\client\\src\\pages\\Profile\\ProfileStyle.ts",["258","259","260","261"]," // @ts-nocheck\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport grey from \"@material-ui/core/colors/grey\";\r\n\r\nexport const useProfileStyles = makeStyles((theme) => ({\r\n    wrapper: {\r\n        flexGrow: 1,\r\n        // backgroundColor: 'rgba(29, 100, 100, 0.1)',\r\n        flexWrap: \"wrap\",\r\n    },\r\n    paperLeft: {\r\n        position: 'absolute',\r\n        zIndex: 1,\r\n        top: '20px',\r\n        position: 'sticky',\r\n        backgroundColor: 'rgba(29, 100, 100, 0.6)',\r\n        width: '17vw',\r\n        height: '50vh',\r\n        margin: theme.spacing(1),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n        borderRadius: '2%',\r\n        boxShadow: '0 0 10px rgba(0,0,0,0.5)',\r\n        '@media(max-width: 1700px)': {\r\n            width: '14vw',\r\n            height: '51vh',\r\n        }\r\n    },\r\n    infoWrap: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        padding: '5px 10px',\r\n        '@media(max-width: 1700px)': {\r\n            display: 'inline'\r\n        }\r\n    },\r\n    addForm: {\r\n        padding: 20,\r\n    },\r\n    addFormBody: {\r\n        display: 'flex',\r\n        width: '100%',\r\n    },\r\n    addFormBottomActions: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n    },\r\n    storyAvatar: {\r\n        display: 'flex-start',\r\n        width: theme.spacing(6.5),\r\n        height: theme.spacing(6.5),\r\n        marginRight: 10,\r\n        '@media (max-width:1100px)': {\r\n            width: theme.spacing(4.5),\r\n            height: theme.spacing(4.5),\r\n        },\r\n        '@media (max-width:890px)': {\r\n            width: theme.spacing(3),\r\n            height: theme.spacing(3),\r\n        },\r\n        '@media (max-width:600px)': {\r\n            width: theme.spacing(3.5),\r\n            height: theme.spacing(3.5),\r\n        }\r\n    },\r\n    addFormBottomActions: {\r\n        marginTop: 10,\r\n        paddingLeft: 70,\r\n    },\r\n    addFormTextareaWrapper: {\r\n        width: '100%'\r\n    },\r\n    addFormTextareaTitle: {\r\n        width: '100%',\r\n        border: '1px solid rgba(169, 187, 184, 0.09)',\r\n        fontSize: 20,\r\n        outline: 'none',\r\n        fontFamily: 'inherit',\r\n        resize: 'none',\r\n    },\r\n    addFormTextarea: {\r\n        width: '100%',\r\n        border: 0,\r\n        fontSize: 20,\r\n        outline: 'none',\r\n        fontFamily: 'inherit',\r\n        resize: 'none',\r\n    },\r\n    addFormBottom: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n    },\r\n    storyFooterLine: {\r\n        height: 12,\r\n        backgroundColor: '#E6ECF0',\r\n    },\r\n    addFormCircleProgress: {\r\n        position: 'relative',\r\n        width: 20,\r\n        height: 20,\r\n        margin: '0 10px',\r\n        '& .MuiCircularProgress-root': {\r\n            position: 'absolute',\r\n        },\r\n    },\r\n    addFormBottomRight: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n\r\n    },\r\n    addFormBottomLine: {\r\n        height: 12,\r\n        backgroundColor: '#E6ECF0',\r\n    },\r\n    paperRight: {\r\n        position: 'relative',\r\n        padding: theme.spacing(2.5),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    media: {\r\n        position: 'relative',\r\n        overflow: 'hidden',\r\n        height: '10vh',\r\n        borderLeft: '50px'\r\n    },\r\n    profileImage: {\r\n        position: \"relative\",\r\n        top: \"-10px\",\r\n        justifyContent: \"center\",\r\n        width: '220px',\r\n        height: '300px',\r\n        border: \"1px solid white\",\r\n        margin: \"auto\",\r\n        '@media(max-width: 1700px)': {\r\n            width: '110px',\r\n            height: '150px',\r\n        }\r\n\r\n    },\r\n    profileInfoContainer: {\r\n        position: \"relative\",\r\n        top: \"-10px\",\r\n        margin: \"auto\"\r\n    },\r\n    userName: {\r\n        fontSize: '15px',\r\n        fontWeight: \"bold\",\r\n        marginBottom: 0,\r\n        '@media(max-width: 1700px)': {\r\n            fontSize: '10px'\r\n        }\r\n    },\r\n    userTag: {\r\n        marginTop: 0\r\n    },\r\n    contentContainer: {\r\n        position: \"relative\",\r\n        top: \"-90px\"\r\n    },\r\n    storyCentred: {\r\n        marginTop: 50,\r\n        textAlign: 'center',\r\n    },storyWrapper: {\r\n        color: 'inherit',\r\n        textDecoration: 'none',\r\n        borderRadius: 0,\r\n        height: '100%',\r\n        borderTop: '0',\r\n        borderBottom: '0',\r\n    },\r\n    storyCentred: {\r\n        marginTop: '150px',\r\n        textAlign: 'center',\r\n        marginLeft: '25vw'\r\n\r\n    },\r\n    storyHeader: {\r\n        borderTop: '0',\r\n        borderLeft: '0',\r\n        borderRight: '0',\r\n        borderRadius: 0,\r\n        padding: '10px 15px',\r\n        '& h6': {\r\n            fontWeight: 800,\r\n        },\r\n    },\r\n    storyHeaderUser: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    storyHeaderBackButton: {\r\n        marginRight: 20,\r\n    },\r\n    storyWrapperHide: {\r\n        height: '25vh',\r\n        overflow: 'hidden'\r\n    },\r\n    storyWrapper: {\r\n        height: '100%'\r\n    },\r\n    story: {\r\n        display: 'flex',\r\n        cursor: 'pointer',\r\n        paddingTop: 15,\r\n        paddingLeft: 10,\r\n        wordBreak: 'break-all',\r\n        '&:hover': {\r\n            backgroundColor: 'rgb(245, 248, 250)',\r\n        },\r\n    },\r\n    storyFooter: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        position: 'relative',\r\n        margin: '0 auto',\r\n        left: -13,\r\n        maxWidth: 450,\r\n    },\r\n    storyUserName: {\r\n        color: grey[500],\r\n    },\r\n    imgWrapper: {\r\n        textAlign:\"center\",\r\n        '& img': {\r\n            height: '250px',\r\n            borderRadius: '30px'\r\n        },\r\n    },\r\n    storyCon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between'\r\n    },\r\n    storyHed: {\r\n        flex: 1\r\n    },\r\n    logoutButton: {\r\n        margin: '50px 0 0 0'\r\n    }\r\n}));\r\n","C:\\React\\StoryApp\\client\\src\\componetns\\CustomNotification.tsx",[],"C:\\React\\StoryApp\\client\\src\\componetns\\ProfileAvatar.tsx",[],"C:\\React\\StoryApp\\client\\src\\componetns\\ProfileStory.tsx",[],"C:\\React\\StoryApp\\client\\src\\componetns\\AddStoryForm\\AddStoryForm.tsx",["262"],"import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport classNames from 'classnames'\r\n\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Button from '@material-ui/core/Button'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport EmojiIcon from '@material-ui/icons/SentimentSatisfiedOutlined'\r\nimport {Alert} from \"@material-ui/lab\"\r\n\r\nimport {fetchAddStoryAC, fetchStoriesAC, setAddFormStateAC} from \"../../store/reducers/stories/actionCreators\"\r\nimport {selectStoryData, selectStoryLoadingStatus} from \"../../store/reducers/story/selectors\"\r\nimport {selectAddFormState} from \"../../store/reducers/stories/selectors\"\r\nimport {clearStoryDataAfterEditAC} from \"../../store/reducers/story/actionCreators\"\r\nimport {LoadingStatus} from \"../../store/types\"\r\nimport {AddFormState, NewStory} from \"../../store/reducers/stories/reducer\";\r\nimport {selectUserDataID} from \"../../store/reducers/users/selectors\";\r\nimport {FetchUserStoriesAC} from \"../../store/reducers/users/actionCreators\";\r\nimport {useAddFormStyles} from \"./addStoryStyles\";\r\nimport {UploadImages} from \"../UploadImages\";\r\nimport {uploadFile} from '../../utils/uploadFile'\r\n\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport {Picker} from 'emoji-mart'\r\n\r\n\r\nimport girl from \"../../assets/gerl.jpg\"\r\n\r\n\r\ninterface AddStoryFormProps {\r\n    onClose?: () => void\r\n    maxRows?: number\r\n}\r\nexport interface ImageObj {\r\n    blobUrl: string\r\n    file: File\r\n}\r\n\r\nconst MAX_LENGTH = 3000;\r\n\r\nexport const AddStoryForm: React.FC<AddStoryFormProps> = ({maxRows, onClose}: AddStoryFormProps): React.ReactElement => {\r\n    const classes = useAddFormStyles()\r\n    const dispatch = useDispatch()\r\n\r\n    const addFormState = useSelector(selectAddFormState)\r\n    const story = useSelector(selectStoryData)\r\n    const loadingStatus = useSelector(selectStoryLoadingStatus)\r\n    const userId = useSelector(selectUserDataID)\r\n\r\n    const [title, setTitle] = React.useState<string | undefined>('')\r\n    const [text, setText] = React.useState<string>('')\r\n    const [images, setImages] = React.useState<ImageObj[]>([])\r\n\r\n    const [showPicker, setShowPicker] = React.useState<boolean>(false)\r\n\r\n\r\n    const textCount = MAX_LENGTH - text.length;\r\n    const textLimitPercent = Math.round((text.length / 3000) * 100);\r\n\r\n    const toggleShowPicker = ():void => {\r\n        setShowPicker((showPicker) => !showPicker)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (story) {\r\n            if (story.title !== title && story.text !== text) {\r\n                setTitle(story.title)\r\n                setText(story.text)\r\n            }\r\n        }\r\n    }, [story])\r\n\r\n    const addNewEmoji = (e: any): void => {\r\n            setText((text + '' + e.native).trim())\r\n    }\r\n\r\n    const handleChangeTextareaTitle = (e: React.FormEvent<HTMLTextAreaElement>): void => {\r\n        if (e.currentTarget) {\r\n            setTitle(e.currentTarget.value);\r\n        }\r\n    };\r\n    const handleChangeTextarea = (e: React.FormEvent<HTMLTextAreaElement>): void => {\r\n        if (e.currentTarget) {\r\n            setText(e.currentTarget.value);\r\n        }\r\n    };\r\n\r\n    //добавление истории\r\n    const handleClickAddStory = async (): Promise<void> => {\r\n        let result = [];\r\n        dispatch(setAddFormStateAC(AddFormState.LOADING));\r\n        for (let i = 0; i < images.length; i++) {\r\n            const file = images[i].file;\r\n            const { url } = await uploadFile(file);\r\n            result.push( url);\r\n        }\r\n        //собрать данные из локального стора и отправить в базу\r\n        const data: NewStory = {title, text, images: result}\r\n        console.log('Data сразу после запроса в форме добавления =', data)\r\n        dispatch(fetchAddStoryAC(data))\r\n        //обнулить локально\r\n        setTitle('')\r\n        setText('')\r\n        setImages([])\r\n        //обнулить в глобальном сторе\r\n        dispatch(clearStoryDataAfterEditAC())\r\n        dispatch(FetchUserStoriesAC(userId))\r\n        onClose()\r\n    };\r\n\r\n    //редактировать\r\n    const handleClickDoneEdit = (): void => {\r\n        handleClickAddStory()\r\n        //обновить список историй, чтобы избежать дублирования\r\n        dispatch(fetchStoriesAC())\r\n        dispatch(FetchUserStoriesAC(userId))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.addFormBody}>\r\n                <div>\r\n                    <Avatar\r\n                        className={classes.storyAvatar}\r\n                        alt={`Аватарка пользователя UserAvatar`}\r\n                        src={girl}\r\n                    />\r\n                </div>\r\n                <div className={classes.addFormTextareaWrapper}>\r\n                    <TextareaAutosize\r\n                        onChange={handleChangeTextareaTitle}\r\n                        className={classes.addFormTextareaTitle}\r\n                        placeholder=\"Заголовок...\"\r\n                        value={title}\r\n                        rowsMax={maxRows}\r\n                    />\r\n                    <TextareaAutosize\r\n                        onChange={handleChangeTextarea}\r\n                        className={classes.addFormTextarea}\r\n                        placeholder=\"Рассказываете...\"\r\n                        value={text}\r\n                        rowsMax={maxRows}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={classes.addFormBottom}>\r\n                <div className={classNames(classes.storyFooterLine, classes.addFormBottomActions)}>\r\n\r\n                    <UploadImages images={images} onChangeImages={setImages}/>\r\n\r\n                    <IconButton color=\"primary\" onClick={toggleShowPicker}>\r\n                        <EmojiIcon style={{fontSize: 26}}/>\r\n                    </IconButton>\r\n                    {\r\n                        showPicker &&\r\n                    <Picker set='apple' style={{ position: 'absolute', top: '145px', left: '140px' }} title=\"Story\"\r\n                            onSelect={ emoji => addNewEmoji(emoji)}\r\n                            i18n={{ search: 'Поиск', notfound:'Эмоций не найдено...',\r\n                                categories: { search: 'А такого нет...', recent: 'Любимые', people: 'Люди', nature: 'Животные', foods: 'Еда', activity: 'Активность',\r\n                                    places: 'Места', objects: 'Обьекты', symbols: 'Символы', flags: 'Флаги', custom: 'Custom'} }}/>\r\n                    }\r\n\r\n                </div>\r\n                <div className={classes.addFormBottomRight}>\r\n                    {text && (\r\n                        <>\r\n                            <span>{textCount}</span>\r\n                            <div className={classes.addFormCircleProgress}>\r\n                                <CircularProgress\r\n                                    variant=\"static\"\r\n                                    size={20}\r\n                                    thickness={5}\r\n                                    value={text.length >= MAX_LENGTH ? 100 : textLimitPercent}\r\n                                    style={text.length >= MAX_LENGTH ? {color: 'red'} : undefined}\r\n                                />\r\n                                <CircularProgress\r\n                                    style={{color: 'rgba(0, 0, 0, 0.1)'}}\r\n                                    variant=\"static\"\r\n                                    size={20}\r\n                                    thickness={5}\r\n                                    value={100}\r\n                                />\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                    {loadingStatus === LoadingStatus.REDACTION\r\n                        ? (<Button\r\n                            onClick={handleClickDoneEdit}\r\n                            disabled={addFormState === AddFormState.LOADING || !text || text.length >= MAX_LENGTH}\r\n                            color=\"primary\"\r\n                            variant=\"contained\">\r\n                            {addFormState === AddFormState.LOADING\r\n                                ? (<CircularProgress color=\"inherit\" size={16}/>)\r\n                                : ('Готово')\r\n                            }\r\n                        </Button>)\r\n                        : (<Button\r\n                                onClick={handleClickAddStory}\r\n                                disabled={addFormState === AddFormState.LOADING || !text || text.length >= MAX_LENGTH}\r\n                                color=\"primary\"\r\n                                variant=\"contained\">\r\n                                {addFormState === AddFormState.LOADING\r\n                                    ? (<CircularProgress color=\"inherit\" size={16}/>)\r\n                                    : ('Опубликовать')}\r\n                            </Button>\r\n                        )}\r\n                </div>\r\n            </div>\r\n            {addFormState === AddFormState.ERROR && (\r\n                <Alert severity=\"error\">Ошибка при добавлении{' '}<span aria-label=\"emoji-plak\"\r\n                                                                        role=\"img\">!</span></Alert>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n","C:\\React\\StoryApp\\client\\src\\componetns\\ModalBlock.tsx",[],"C:\\React\\StoryApp\\client\\src\\utils\\formatDate.ts",[],"C:\\React\\StoryApp\\client\\src\\utils\\uploadFile.ts",[],"C:\\React\\StoryApp\\client\\src\\store\\reducers\\story\\selectors.ts",[],"C:\\React\\StoryApp\\client\\src\\componetns\\AddStoryForm\\addStoryStyles.ts",[],"C:\\React\\StoryApp\\client\\src\\componetns\\UploadImages.tsx",["263","264","265"],"import { IconButton } from '@material-ui/core';\r\nimport React from 'react';\r\nimport ImageOutlinedIcon from '@material-ui/icons/ImageOutlined';\r\nimport {ImageObj} from \"./AddStoryForm/AddStoryForm\";\r\nimport {ImageList} from \"./ImageList\";\r\nimport {useHomeStyles} from \"../pages/Home/theme\";\r\n\r\n\r\n\r\ninterface UploadImageProps {\r\n    images: ImageObj[];\r\n    onChangeImages: (callback: (prev: ImageObj[]) => ImageObj[]) => void;\r\n}\r\n\r\nexport const UploadImages: React.FC<UploadImageProps> = ({ images, onChangeImages }) => {\r\n    const classes = useHomeStyles();\r\n    const inputRef = React.useRef<HTMLInputElement>(null);\r\n\r\n    const handleClickImage = () => {\r\n        if (inputRef.current) {\r\n            inputRef.current.click();\r\n        }\r\n    };\r\n\r\n    const removeImage = (url: string) => {\r\n        onChangeImages((prev) => prev.filter((obj) => obj.blobUrl !== url));\r\n    };\r\n\r\n    const handleChangeFileInput = React.useCallback((event: Event) => {\r\n        if (event.target) {\r\n            const target = event.target as HTMLInputElement;\r\n            const file = target.files?.[0];\r\n            if (file) {\r\n                const fileObj = new Blob([file]);\r\n                onChangeImages((prev) => [\r\n                    ...prev,\r\n                    {\r\n                        blobUrl: URL.createObjectURL(fileObj),\r\n                        file,\r\n                    },\r\n                ]);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (inputRef.current) {\r\n            inputRef.current.addEventListener('change', handleChangeFileInput);\r\n        }\r\n        return () => {\r\n            if (inputRef.current) {\r\n                inputRef.current.removeEventListener('change', handleChangeFileInput);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <ImageList\r\n                images={images.map((obj) => obj.blobUrl)}\r\n                classes={classes}\r\n                removeImage={removeImage}\r\n            />\r\n            {(images.length > 0)\r\n                ? null\r\n                : <IconButton onClick={handleClickImage} color=\"primary\">\r\n                    <ImageOutlinedIcon style={{ fontSize: 26 }} />\r\n                  </IconButton>}\r\n            <input ref={inputRef} type=\"file\" id=\"upload-input\" hidden />\r\n        </div>\r\n    );\r\n};\r\n","C:\\React\\StoryApp\\client\\src\\componetns\\ImageList.tsx",["266"],"import React from 'react';\r\nimport { IconButton } from '@material-ui/core';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport {useHomeStyles} from \"../pages/Home/theme\";\r\n\r\ninterface ImageListProps {\r\n    images: string[];\r\n    classes?: ReturnType<typeof useHomeStyles>;\r\n    removeImage?: (url: string) => void;\r\n}\r\n\r\nexport const ImageList: React.FC<ImageListProps> = ({ classes, images, removeImage }) => {\r\n    if (!images.length) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.imagesList}>\r\n            {images.map((url) => (\r\n                <div className={classes.imagesListItem}>\r\n                    {removeImage && (\r\n                        <IconButton\r\n                            className={classes.imagesListItemRemove}\r\n                            onClick={(): void => removeImage(url)}>\r\n                            <ClearIcon style={{ fontSize: 15 }} />\r\n                        </IconButton>\r\n                    )}\r\n                    <img key={url} src={url} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n","C:\\React\\StoryApp\\client\\src\\pages\\SingIn\\components\\LoginModal.tsx",["267"],"import React, {useEffect, useState} from \"react\"\r\nimport {ModalBlock} from \"../../../componetns/ModalBlock\"\r\nimport FormControl from \"@material-ui/core/FormControl\"\r\nimport FormGroup from \"@material-ui/core/FormGroup\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport {Button} from \"@material-ui/core\"\r\nimport {useStylesSignIn} from \"../theme\"\r\nimport {Controller, useForm} from \"react-hook-form\"\r\nimport {yupResolver} from '@hookform/resolvers/yup'\r\nimport * as yup from \"yup\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {FetchLoginAC} from \"../../../store/reducers/users/actionCreators\"\r\nimport {selectUserStatus} from \"../../../store/reducers/users/selectors\";\r\nimport {LoadingStatus} from \"../../../store/types\";\r\nimport {CustomNotification} from \"../../../componetns/CustomNotification\";\r\n\r\nexport interface LoginFormProps {\r\n    email: string\r\n    password: string\r\n}\r\n\r\ninterface LoginModalProps {\r\n    open: boolean\r\n    onClose: () => void\r\n}\r\n\r\n//схема таблици логинизации, валидация ошибок при вводе\r\nconst LoginFormSchema = yup.object().shape({\r\n    email: yup.string().email('Неверный формат почты').required('Введите почту'),\r\n    password: yup.string().min(6, '​Минимальная длина пароля 6 символов').required(),\r\n});\r\n\r\n\r\n//проверить правильность обработки статусов загрузки\r\n\r\n/*БЛОК \"ВОЙТИ\"*/\r\nconst LoginModal: React.FC<LoginModalProps> = ({open, onClose}): React.ReactElement => {\r\n    const classes = useStylesSignIn();\r\n    const dispatch = useDispatch();\r\n    const loadingStatus = useSelector(selectUserStatus);\r\n    const [message, setMessage] = useState<'error' | 'success'>()\r\n\r\n\r\n    //react-hook-form любезно предоставляет все обработчики, спасибо\r\n    const {control, handleSubmit, errors} = useForm<LoginFormProps>({\r\n        resolver: yupResolver(LoginFormSchema)\r\n    });\r\n\r\n    //при сабмите отправим в редакс данные, собранные из input\r\n    const onSubmit = async (data: LoginFormProps) => {\r\n        dispatch(FetchLoginAC(data))\r\n    };\r\n\r\n    useEffect(() => {\r\n         if (loadingStatus === LoadingStatus.ERROR) {\r\n            setMessage('error')\r\n        }\r\n    }, []);\r\n    return (\r\n        <>\r\n            {message === 'error' ? <CustomNotification isOpen={true} type={'error'}\r\n                    text={'Где-то Вы, уважаемый, дали в штангу 😄'} autoHide={5000}/> : null}\r\n            <ModalBlock visible={open} onClose={onClose} classes={classes} title=\"Войти в аккаунт\">\r\n\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <FormControl className={classes.loginFormControl} component=\"fieldset\" fullWidth>\r\n                        <FormGroup aria-label=\"position\" row>\r\n                            <Controller as={TextField} control={control} name=\"email\"\r\n                                        className={classes.loginSideField} id=\"email\"\r\n                                        label=\"E-Mail\" InputLabelProps={{shrink: true}}\r\n                                        variant=\"filled\" type=\"email\" defaultValue=\"\"\r\n                                        helperText={errors.email?.message}\r\n                                        error={!!errors.email} fullWidth autoFocus/>\r\n\r\n                            <Controller as={TextField} control={control} name=\"password\"\r\n                                        className={classes.loginSideField} id=\"password\"\r\n                                        label=\"Пароль\" InputLabelProps={{shrink: true}}\r\n                                        variant=\"filled\" type=\"password\" defaultValue=\"\"\r\n                                        helperText={errors.password?.message}\r\n                                        error={!!errors.password} fullWidth/>\r\n\r\n                            <Button type=\"submit\" variant=\"contained\" fullWidth>Войти</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </ModalBlock>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginModal","C:\\React\\StoryApp\\client\\src\\componetns\\BackButton.tsx",[],"C:\\React\\StoryApp\\client\\src\\componetns\\FullStory.tsx",["268"],"import React, {useEffect} from 'react'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport classNames from 'classnames'\r\nimport CommentIcon from '@material-ui/icons/ChatBubbleOutlineOutlined'\r\nimport RepostIcon from '@material-ui/icons/RepeatOutlined'\r\nimport LikeIcon from '@material-ui/icons/FavoriteBorderOutlined'\r\nimport ShareIcon from '@material-ui/icons/ReplyOutlined'\r\nimport {Divider, IconButton} from '@material-ui/core'\r\nimport {useHomeStyles} from \"../pages/Home/theme\"\r\nimport {useParams} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport format from 'date-fns/format'\r\nimport ruLang from 'date-fns/locale/ru'\r\nimport {Story} from \"./Story\"\r\nimport {fetchStoryByIdAC, setStoryByIdAC, setStoryLoadingStatusAC} from \"../store/reducers/story/actionCreators\"\r\nimport {selectStoryIsLoaded, selectStoryState} from \"../store/reducers/story/selectors\"\r\nimport {LoadingStatus} from \"../store/types\"\r\n// @ts-ignore\r\nimport ava from '../assets/som_logo.jpg'\r\n// @ts-ignore\r\nimport mediumZoom from \"medium-zoom\"\r\n\r\n\r\n\r\n//компонент для отображения полной истории после нажатия на превью в странице Layout\r\nexport const FullStory: React.FC = (): React.ReactElement | null => {\r\n    const classes = useHomeStyles();\r\n    const dispatch = useDispatch()\r\n\r\n    const {data} = useSelector(selectStoryState)\r\n    const isLoaded = useSelector(selectStoryIsLoaded)\r\n\r\n    const params: {id?: string} = useParams()\r\n    const id = params.id\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(fetchStoryByIdAC(id))\r\n        }\r\n        return () => {\r\n            dispatch(setStoryByIdAC(undefined))\r\n            dispatch(setStoryLoadingStatusAC(LoadingStatus.NEVER))\r\n        }\r\n    }, [dispatch, id])\r\n\r\n    mediumZoom('.imgWrapper img')\r\n\r\n    //если идет загрузка, покажи прелоадер\r\n    if (!isLoaded) {\r\n        return <div className={classes.storyCentred}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    //если прилители данные, флаг isLoaded установится в true, загрузка завершена, покажу компонент полной \"истории\"\r\n    if (data) {\r\n        // @ts-ignore\r\n        return (\r\n            <>\r\n                <Paper className={classes.fullStory}>\r\n                    <div className={classNames(classes.storyHeaderUser)}>\r\n                        <Avatar\r\n                            className={classes.storyAvatar}\r\n                            alt={`Аватарка пользователя${data._id}`}\r\n                            src={ava}\r\n                            // src={data.user.avatarUrl}\r\n                        />\r\n                        <Typography>\r\n                            <b>{data.user.fullname}</b>&nbsp;\r\n                            <div>\r\n                                <span className={classes.storyUserName}>@{data.user.username}</span>&nbsp;\r\n                            </div>\r\n                        </Typography>\r\n                    </div>\r\n                    <Typography variant=\"h4\" align='center' gutterBottom>\r\n                        {data.title}\r\n                    </Typography>\r\n                    <Typography className={classes.fullStoryText} gutterBottom>\r\n                        {data.text}\r\n                    </Typography>\r\n                    <div className={classes.imgWrapper}>\r\n                        {data.images && data.images.map((url) => <img src={url} key={url} className='dataZoomable'/>  )}\r\n                    </div>\r\n                    <Typography>\r\n                        {/*Вывожу дату создания в выбранном формате и языке*/}\r\n                        <span\r\n                            className={classes.storyUserName}>{format(new Date(data.createdAt), 'H:mm', {locale: ruLang})} · </span>\r\n                        <span\r\n                            className={classes.storyUserName}>{format(new Date(data.createdAt), 'dd MMM. yyyy г.', {locale: ruLang})}</span>\r\n                    </Typography>\r\n                    <div className={classNames(classes.storyFooter, classes.fullStoryFooter)}>\r\n                        <IconButton>\r\n                            <CommentIcon className={classes.fullStoryIcon}/>\r\n                        </IconButton>\r\n                        <IconButton>\r\n                            <RepostIcon className={classes.fullStoryIcon}/>\r\n                        </IconButton>\r\n                        <IconButton>\r\n                            <LikeIcon className={classes.fullStoryIcon}/>\r\n                        </IconButton>\r\n                        <IconButton>\r\n                            <ShareIcon className={classes.fullStoryIcon}/>\r\n                        </IconButton>\r\n                    </div>\r\n                </Paper>\r\n                <Divider/>\r\n                <Story\r\n                    _id=\"1\"\r\n                    text=\"А что, мне понравилась,  1f923😁 забавно\"\r\n                    createdAt={new Date().toString()}\r\n                    user={{\r\n                        fullname: 'Петр Петров',\r\n                        username: 'Petron_huhu'\r\n                    }}\r\n                    classes={classes}\r\n                />\r\n            </>)\r\n    }\r\n    return null\r\n}\r\n\r\n","C:\\React\\StoryApp\\client\\src\\componetns\\ModalMenu.tsx",[],"C:\\React\\StoryApp\\client\\src\\componetns\\Story.tsx",["269"],"import React from \"react\"\r\nimport {useHistory} from 'react-router-dom'\r\nimport classNames from \"classnames\"\r\n\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport {Avatar, IconButton, Typography} from \"@material-ui/core\"\r\nimport CommentIcon from \"@material-ui/icons/RateReview\"\r\nimport RepostIcon from \"@material-ui/icons/Repeat\"\r\nimport LikeIcon from \"@material-ui/icons/FavoriteBorderOutlined\"\r\nimport ShareIcon from \"@material-ui/icons/OpenInBrowserOutlined\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\n\r\nimport {formatDate} from \"../utils/formatDate\"\r\nimport {useHomeStyles} from \"../pages/Home/theme\"\r\n// @ts-ignore\r\nimport Ava from '../assets/user.png'\r\n\r\n\r\ninterface StoryProps {\r\n    _id: string\r\n    title?: string | undefined\r\n    text: string\r\n    classes: ReturnType<typeof useHomeStyles>\r\n    createdAt: string\r\n    images?: string[]\r\n    user: {\r\n        fullname: string\r\n        username: string\r\n        avatarUrl?: string\r\n    }\r\n}\r\n\r\nexport const Story: React.FC<StoryProps> = ({_id, title, text, user, images, classes, createdAt}: StoryProps): React.ReactElement => {\r\n    const history = useHistory()\r\n\r\n    const handleClickStory = (event: React.MouseEvent<HTMLAnchorElement>): void => {\r\n        event.preventDefault();\r\n        history.push(`/home/stories/${_id}`);\r\n    }\r\n\r\n    return (user && (<div>\r\n                <Paper variant=\"outlined\" className={classNames(classes.story, classes.storyHeader)}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={1}>\r\n                            <Avatar className={classes.storyAvatar} alt={`Аватарка пользователя`}\r\n                                // прикрутить user.avatarUrl\r\n                                    src={Ava}/>\r\n                        </Grid>\r\n                        <Grid item xs={11}>\r\n                            <div className={classes.storyCon}>\r\n                                <div className={classes.storyHed}>\r\n                                    <Typography><b>{user.fullname}</b>&nbsp;\r\n                                        <span className={classes.storyUserName}>@{user.username}</span>&nbsp;\r\n                                        <span className={classes.storyUserName}>.</span>&nbsp;\r\n                                        <span>{formatDate(new Date(createdAt))}</span>\r\n                                    </Typography>\r\n                                </div>\r\n                            </div>\r\n                            <a className={classes.storyWrapper} onClick={handleClickStory} href={`/home/story/${_id}`}>\r\n                                <Typography variant=\"subtitle1\" align='center' gutterBottom>\r\n                                    {title}\r\n                                </Typography>\r\n                                <Typography variant=\"body1\" gutterBottom>\r\n                                    {text}\r\n                                </Typography>\r\n                                <div className={classes.imgWrapper}>\r\n                                {images && images.map((url) => <img src={url} key={url}/>  )}\r\n                                </div>\r\n                            </a>\r\n\r\n                            <div className={classes.storyFooter}>\r\n                                <div>\r\n                                    <IconButton color='primary'>\r\n                                        <CommentIcon style={{fontSize: 20}}/>\r\n                                    </IconButton>\r\n                                    <span>1</span>\r\n                                </div>\r\n                                <div>\r\n                                    <IconButton color='primary'>\r\n                                        <RepostIcon style={{fontSize: 20}}/>\r\n                                    </IconButton>\r\n                                </div>\r\n                                <div>\r\n                                    <IconButton color='primary'>\r\n                                        <LikeIcon style={{fontSize: 20}}/>\r\n                                    </IconButton>\r\n                                </div>\r\n                                <div>\r\n                                    <IconButton color='primary'>\r\n                                        <ShareIcon style={{fontSize: 20}}/>\r\n                                    </IconButton>\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n\r\n            </div>\r\n        )\r\n    )\r\n}\r\n\r\n","C:\\React\\StoryApp\\client\\src\\componetns\\HeaderMenu.tsx",[],"C:\\React\\StoryApp\\client\\src\\pages\\Home\\RightSide.tsx",[],"C:\\React\\StoryApp\\client\\src\\componetns\\SearchTextField.tsx",[],["270","271"],"C:\\React\\StoryApp\\client\\src\\componetns\\UploadAvatar.tsx",["272","273","274"],"import React from 'react';\r\nimport {IconButton} from '@material-ui/core';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport {ImageObj} from \"./AddStoryForm/AddStoryForm\";\r\n\r\n\r\ninterface UploadImageProps {\r\n    images: ImageObj[];\r\n    onChangeImages: (callback: (prev: ImageObj[]) => ImageObj[]) => void;\r\n}\r\n\r\nexport const UploadAvatars: React.FC<UploadImageProps> = ({ images, onChangeImages }) => {\r\n    const inputRef = React.useRef<HTMLInputElement>(null);\r\n\r\n    const handleClickImage = () => {\r\n        if (inputRef.current) {\r\n            inputRef.current.click();\r\n        }\r\n    };\r\n\r\n\r\n    const handleChangeAvatar = React.useCallback((event: Event) => {\r\n        if (event.target) {\r\n            const target = event.target as HTMLInputElement;\r\n            const file = target.files?.[0];\r\n            if (file) {\r\n                const fileObj = new Blob([file]);\r\n                onChangeImages((prev) => [\r\n                    ...prev,\r\n                    {\r\n                        blobUrl: URL.createObjectURL(fileObj),\r\n                        file,\r\n                    },\r\n                ]);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (inputRef.current) {\r\n            inputRef.current.addEventListener('change', handleChangeAvatar);\r\n        }\r\n        return () => {\r\n            if (inputRef.current) {\r\n                inputRef.current.removeEventListener('change', handleChangeAvatar);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{position: 'absolute', zIndex: 1, marginLeft: '75%'}}>\r\n            {(images.length > 7)\r\n                ? null\r\n                : <IconButton onClick={handleClickImage} color=\"primary\">\r\n                    <CreateIcon style={{ fontSize: 26 }} />\r\n                  </IconButton>}\r\n            <input ref={inputRef} type=\"file\" id=\"upload-input\" hidden />\r\n        </div>\r\n    );\r\n};\r\n","C:\\React\\StoryApp\\client\\src\\utils\\uploadAvatar.ts",[],{"ruleId":"275","replacedBy":"276"},{"ruleId":"277","replacedBy":"278"},{"ruleId":"275","replacedBy":"276"},{"ruleId":"277","replacedBy":"278"},{"ruleId":"279","severity":1,"message":"280","line":29,"column":8,"nodeType":"281","endLine":29,"endColumn":15,"suggestions":"282"},{"ruleId":"283","severity":1,"message":"284","line":2,"column":9,"nodeType":"285","messageId":"286","endLine":2,"endColumn":13},{"ruleId":"283","severity":1,"message":"287","line":25,"column":7,"nodeType":"285","messageId":"286","endLine":25,"endColumn":11},{"ruleId":"288","severity":1,"message":"289","line":12,"column":7,"nodeType":"285","messageId":"290","endLine":12,"endColumn":31},{"ruleId":"283","severity":1,"message":"291","line":15,"column":9,"nodeType":"285","messageId":"286","endLine":15,"endColumn":32},{"ruleId":"283","severity":1,"message":"292","line":3,"column":9,"nodeType":"285","messageId":"286","endLine":3,"endColumn":19},{"ruleId":"283","severity":1,"message":"293","line":4,"column":9,"nodeType":"285","messageId":"286","endLine":4,"endColumn":24},{"ruleId":"279","severity":1,"message":"294","line":32,"column":8,"nodeType":"281","endLine":32,"endColumn":10,"suggestions":"295"},{"ruleId":"283","severity":1,"message":"296","line":2,"column":9,"nodeType":"285","messageId":"286","endLine":2,"endColumn":17},{"ruleId":"297","severity":1,"message":"298","line":38,"column":1,"nodeType":"299","messageId":"300","endLine":39,"endColumn":2},{"ruleId":"279","severity":1,"message":"301","line":62,"column":8,"nodeType":"281","endLine":62,"endColumn":10,"suggestions":"302"},{"ruleId":"303","severity":1,"message":"304","line":15,"column":9,"nodeType":"305","messageId":"306","endLine":15,"endColumn":17},{"ruleId":"303","severity":1,"message":"307","line":67,"column":5,"nodeType":"305","messageId":"306","endLine":67,"endColumn":25},{"ruleId":"303","severity":1,"message":"308","line":174,"column":5,"nodeType":"305","messageId":"306","endLine":174,"endColumn":17},{"ruleId":"303","severity":1,"message":"309","line":201,"column":5,"nodeType":"305","messageId":"306","endLine":201,"endColumn":17},{"ruleId":"279","severity":1,"message":"310","line":73,"column":8,"nodeType":"281","endLine":73,"endColumn":15,"suggestions":"311"},{"ruleId":"279","severity":1,"message":"312","line":44,"column":8,"nodeType":"281","endLine":44,"endColumn":10,"suggestions":"313"},{"ruleId":"279","severity":1,"message":"314","line":52,"column":26,"nodeType":"285","endLine":52,"endColumn":33},{"ruleId":"279","severity":1,"message":"315","line":55,"column":8,"nodeType":"281","endLine":55,"endColumn":10,"suggestions":"316"},{"ruleId":"317","severity":1,"message":"318","line":28,"column":21,"nodeType":"319","endLine":28,"endColumn":48},{"ruleId":"279","severity":1,"message":"301","line":58,"column":8,"nodeType":"281","endLine":58,"endColumn":10,"suggestions":"320"},{"ruleId":"317","severity":1,"message":"318","line":85,"column":66,"nodeType":"319","endLine":85,"endColumn":117},{"ruleId":"317","severity":1,"message":"318","line":67,"column":64,"nodeType":"319","endLine":67,"endColumn":90},{"ruleId":"275","replacedBy":"321"},{"ruleId":"277","replacedBy":"322"},{"ruleId":"279","severity":1,"message":"312","line":37,"column":8,"nodeType":"281","endLine":37,"endColumn":10,"suggestions":"323"},{"ruleId":"279","severity":1,"message":"314","line":45,"column":26,"nodeType":"285","endLine":45,"endColumn":33},{"ruleId":"279","severity":1,"message":"324","line":48,"column":8,"nodeType":"281","endLine":48,"endColumn":10,"suggestions":"325"},"no-native-reassign",["326"],"no-negated-in-lhs",["327"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["328"],"@typescript-eslint/no-unused-vars","'User' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","@typescript-eslint/no-redeclare","'Layout' is already defined.","redeclared","'fetchUserStoriesRequest' is defined but never used.","'StoryState' is defined but never used.","'selectUserState' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'userData._id', and 'userIsAuth'. Either include them or remove the dependency array.",["329"],"'NewStory' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","React Hook useEffect has a missing dependency: 'loadingStatus'. Either include it or remove the dependency array.",["330"],"no-dupe-keys","Duplicate key 'position'.","ObjectExpression","unexpected","Duplicate key 'addFormBottomActions'.","Duplicate key 'storyCentred'.","Duplicate key 'storyWrapper'.","React Hook useEffect has missing dependencies: 'text' and 'title'. Either include them or remove the dependency array.",["331"],"React Hook React.useCallback has a missing dependency: 'onChangeImages'. Either include it or remove the dependency array. If 'onChangeImages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["332"],"The ref value 'inputRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'inputRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook React.useEffect has a missing dependency: 'handleChangeFileInput'. Either include it or remove the dependency array.",["333"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["334"],["326"],["327"],["335"],"React Hook React.useEffect has a missing dependency: 'handleChangeAvatar'. Either include it or remove the dependency array.",["336"],"no-global-assign","no-unsafe-negation",{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"341","fix":"349"},{"desc":"345","fix":"350"},{"desc":"351","fix":"352"},"Update the dependencies array to be: [history, token]",{"range":"353","text":"354"},"Update the dependencies array to be: [dispatch, userData._id, userIsAuth]",{"range":"355","text":"356"},"Update the dependencies array to be: [loadingStatus]",{"range":"357","text":"358"},"Update the dependencies array to be: [story, text, title]",{"range":"359","text":"360"},"Update the dependencies array to be: [onChangeImages]",{"range":"361","text":"362"},"Update the dependencies array to be: [handleChangeFileInput]",{"range":"363","text":"364"},{"range":"365","text":"358"},{"range":"366","text":"362"},"Update the dependencies array to be: [handleChangeAvatar]",{"range":"367","text":"368"},[1205,1212],"[history, token]",[1098,1100],"[dispatch, userData._id, userIsAuth]",[2314,2316],"[loadingStatus]",[2769,2776],"[story, text, title]",[1441,1443],"[onChangeImages]",[1786,1788],"[handleChangeFileInput]",[2133,2135],[1161,1163],[1500,1502],"[handleChangeAvatar]"]